"use strict";(self.webpackChunkmy_knowledge_repo=self.webpackChunkmy_knowledge_repo||[]).push([[440],{7227:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=n(5893),o=n(1151);const s={title:"\u7b2c\u4e00\u7ae0\u7b14\u8bb0\u4e0a",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},i=void 0,r={id:"technical/programming-language-pragmatics/01",title:"\u7b2c\u4e00\u7ae0\u7b14\u8bb0\u4e0a",description:"The Art of Language Design",source:"@site/docs/technical/programming-language-pragmatics/01.md",sourceDirName:"technical/programming-language-pragmatics",slug:"/technical/programming-language-pragmatics/01",permalink:"/docs/technical/programming-language-pragmatics/01",draft:!1,unlisted:!1,tags:[{label:"\u7f16\u8bd1\u5668",permalink:"/docs/tags/\u7f16\u8bd1\u5668"},{label:"Programming Language Pragmatics",permalink:"/docs/tags/programming-language-pragmatics"}],version:"current",frontMatter:{title:"\u7b2c\u4e00\u7ae0\u7b14\u8bb0\u4e0a",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},sidebar:"technical",previous:{title:"Programming Language Pragmatics",permalink:"/docs/category/programming-language-pragmatics"},next:{title:"\u7b2c\u4e00\u7ae0\u7b14\u8bb0\u4e0b",permalink:"/docs/technical/programming-language-pragmatics/02"}},l={},c=[{value:"The Art of Language Design",id:"the-art-of-language-design",level:2},{value:"Evolution.",id:"evolution",level:3},{value:"Special Purposes.",id:"special-purposes",level:3},{value:"Personal Preference.",id:"personal-preference",level:3},{value:"Expressive Power.",id:"expressive-power",level:3},{value:"Ease of Use for the Novice.",id:"ease-of-use-for-the-novice",level:3},{value:"Ease of Implementation.",id:"ease-of-implementation",level:3},{value:"Standardization.",id:"standardization",level:3},{value:"Open Source.",id:"open-source",level:3},{value:"Excellent Compilers.",id:"excellent-compilers",level:3},{value:"Economics, Patronage, and Inertia.",id:"economics-patronage-and-inertia",level:3}];function h(e){const a={blockquote:"blockquote",h2:"h2",h3:"h3",p:"p",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"the-art-of-language-design",children:"The Art of Language Design"}),"\n",(0,t.jsx)(a.p,{children:"Today there are thousands of high-level programming languages, and new ones continue to emerge. Human beings use assembly language only for specialpurpose applications. In a typical undergraduate class, it is not uncommon to find users of scores of different languages. Why are there so many? There are several possible answers:"}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u4eca\u5929\u6709\u6210\u5343\u4e0a\u4e07\u79cd\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u4e14\u65b0\u7684\u8bed\u8a00\u4e0d\u65ad\u6d8c\u73b0\u3002\u4eba\u7c7b\u53ea\u5728\u7279\u5b9a\u5e94\u7528\u4e2d\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u3002\u5728\u5178\u578b\u7684\u672c\u79d1\u8bfe\u7a0b\u4e2d\uff0c\u53d1\u73b0\u4f7f\u7528\u6570\u5341\u79cd\u4e0d\u540c\u8bed\u8a00\u7684\u60c5\u51b5\u5e76\u4e0d\u7f55\u89c1\u3002\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e48\u591a\u79cd\u8bed\u8a00\uff1f\u8fd9\u6709\u51e0\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\uff1a"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"evolution",children:"Evolution."}),"\n",(0,t.jsx)(a.p,{children:"Computer science is a young discipline; we\u2019re constantly finding better ways to do things. The late 1960s and early 1970s saw a revolution in \u201cstructured programming,\u201d in which the goto-based control flow of languages like Fortran,Cobol,and Basic3 gave way to while loops, case (switch) statements, and similar higher level constructs. In the late 1980s the nested block structure of languages like Algol,Pascal,and Ada began to give way to the object-oriented structure of Smalltalk, C++, Eiffel, and the like."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u8ba1\u7b97\u673a\u79d1\u5b66\u662f\u4e00\u4e2a\u5e74\u8f7b\u7684\u5b66\u79d1\uff1b\u6211\u4eec\u4e0d\u65ad\u53d1\u73b0\u66f4\u597d\u7684\u505a\u4e8b\u65b9\u5f0f\u300220\u4e16\u7eaa60\u5e74\u4ee3\u672b\u548c70\u5e74\u4ee3\u521d\uff0c\u51fa\u73b0\u4e86\u201c\u7ed3\u6784\u5316\u7f16\u7a0b\u201d\u7684\u9769\u547d\uff0c\u5176\u4e2d\u50cfFortran\u3001Cobol\u548cBasic3\u8fd9\u6837\u57fa\u4e8egoto\u7684\u63a7\u5236\u6d41\u8ba9\u4f4d\u7ed9\u4e86while\u5faa\u73af\u3001case\uff08switch\uff09\u8bed\u53e5\u548c\u7c7b\u4f3c\u7684\u66f4\u9ad8\u7ea7\u6784\u9020\u3002\u5230\u4e8620\u4e16\u7eaa80\u5e74\u4ee3\u672b\uff0c\u50cfAlgol\u3001Pascal\u548cAda\u8fd9\u6837\u7684\u8bed\u8a00\u7684\u5d4c\u5957\u5757\u7ed3\u6784\u5f00\u59cb\u8ba9\u4f4d\u4e8eSmalltalk\u3001C++\u3001Eiffel\u7b49\u9762\u5411\u5bf9\u8c61\u7684\u7ed3\u6784\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"special-purposes",children:"Special Purposes."}),"\n",(0,t.jsx)(a.p,{children:"Many languages were designed for a specific problem domain. The various Lisp dialects are good for manipulating symbolic data and complex data structures. Icon and Awk are good for manipulating character strings. C is good for low-level systems programming. Prolog is good for reasoning about logical relationships among data. Each of these languages can be used successfully for a wider range of tasks, but the emphasis is clearly on the specialty."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u662f\u4e3a\u7279\u5b9a\u7684\u95ee\u9898\u9886\u57df\u800c\u8bbe\u8ba1\u7684\u3002\u5404\u79cdLisp\u65b9\u8a00\u9002\u7528\u4e8e\u64cd\u7eb5\u7b26\u53f7\u6570\u636e\u548c\u590d\u6742\u6570\u636e\u7ed3\u6784\u3002Icon\u548cAwk\u9002\u7528\u4e8e\u64cd\u7eb5\u5b57\u7b26\u4e32\u3002C\u9002\u7528\u4e8e\u4f4e\u7ea7\u7cfb\u7edf\u7f16\u7a0b\u3002Prolog\u9002\u7528\u4e8e\u63a8\u7406\u6570\u636e\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\u3002\u8fd9\u4e9b\u8bed\u8a00\u90fd\u53ef\u4ee5\u6210\u529f\u5730\u7528\u4e8e\u66f4\u5e7f\u6cdb\u7684\u4efb\u52a1\uff0c\u4f46\u91cd\u70b9\u663e\u7136\u5728\u4e8e\u4e13\u4e1a\u9886\u57df\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"personal-preference",children:"Personal Preference."}),"\n",(0,t.jsx)(a.p,{children:"Different people like different things. Much of the parochialism of programming is simply a matter of taste. Some people love the terseness of C; some hate it. Some people find it natural to think recursively; others prefer iteration. Some people like to work with pointers; others prefer the implicit dereferencing of Lisp, Clu, Java, and ML. The strength and variety of personal preference make it unlikely that anyone will ever develop a universally acceptable programming language."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u4e0d\u540c\u7684\u4eba\u559c\u6b22\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u7f16\u7a0b\u4e2d\u7684\u5f88\u591a\u504f\u89c1\u53ea\u662f\u54c1\u5473\u4e0a\u7684\u95ee\u9898\u3002\u6709\u4e9b\u4eba\u559c\u6b22C\u7684\u7b80\u6d01\u6027\uff1b\u6709\u4e9b\u4eba\u5219\u8ba8\u538c\u3002\u6709\u4e9b\u4eba\u89c9\u5f97\u9012\u5f52\u601d\u8003\u5f88\u81ea\u7136\uff1b\u800c\u5176\u4ed6\u4eba\u5219\u66f4\u559c\u6b22\u8fed\u4ee3\u3002\u6709\u4e9b\u4eba\u559c\u6b22\u4f7f\u7528\u6307\u9488\uff1b\u5176\u4ed6\u4eba\u5219\u66f4\u559c\u6b22Lisp\u3001Clu\u3001Java\u548cML\u4e2d\u9690\u5f0f\u89e3\u5f15\u7528\u7684\u65b9\u5f0f\u3002\u4e2a\u4eba\u504f\u597d\u7684\u5f3a\u5927\u548c\u591a\u6837\u6027\u4f7f\u5f97\u51e0\u4e4e\u4e0d\u53ef\u80fd\u6709\u4eba\u80fd\u591f\u5f00\u53d1\u51fa\u4e00\u4e2a\u88ab\u666e\u904d\u63a5\u53d7\u7684\u7f16\u7a0b\u8bed\u8a00\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Of course, some languages are more successful than others. Of the many that have been designed, only a few dozen are widely used. What makes a language successful? Again there are several answers:"}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u5f53\u7136\uff0c\u4e00\u4e9b\u8bed\u8a00\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u6210\u529f\u3002\u5728\u4f17\u591a\u88ab\u8bbe\u8ba1\u51fa\u6765\u7684\u8bed\u8a00\u4e2d\uff0c\u53ea\u6709\u51e0\u5341\u79cd\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002\u662f\u4ec0\u4e48\u8ba9\u4e00\u79cd\u8bed\u8a00\u6210\u529f\uff1f\u8fd9\u4e2a\u95ee\u9898\u6709\u51e0\u4e2a\u7b54\u6848\uff1a"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"expressive-power",children:"Expressive Power."}),"\n",(0,t.jsx)(a.p,{children:"One commonly hears arguments that one language is more \u201cpowerful\u201d than another, though in a formal mathematical sense they are all Turing complete\u2014each can be used, if awkwardly, to implement arbitrary algorithms. Still, language features clearly have a huge impact on the programmer\u2019s ability to write clear, concise, and maintainable code, especially for very large systems. There is no comparison, for example, between early versions of Basic on the one hand, and Common Lisp or Ada on the other. The factors that contribute to expressive power\u2014abstraction facilities in particular\u2014are a major focus of this book."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u4eba\u4eec\u7ecf\u5e38\u542c\u5230\u6709\u5173\u4e00\u79cd\u8bed\u8a00\u6bd4\u53e6\u4e00\u79cd\u8bed\u8a00\u66f4\u201c\u5f3a\u5927\u201d\u7684\u8bba\u70b9\uff0c\u5c3d\u7ba1\u4ece\u6b63\u5f0f\u7684\u6570\u5b66\u610f\u4e49\u4e0a\u8bb2\uff0c\u5b83\u4eec\u90fd\u662f\u56fe\u7075\u5b8c\u5907\u7684\u2014\u2014\u6bcf\u79cd\u8bed\u8a00\u90fd\u53ef\u4ee5\u88ab\u4f7f\u7528\uff08\u867d\u7136\u6709\u65f6\u4f1a\u5f88\u7b28\u62d9\uff09\u6765\u5b9e\u73b0\u4efb\u610f\u7b97\u6cd5\u3002\u7136\u800c\uff0c\u8bed\u8a00\u7279\u6027\u663e\u7136\u5bf9\u7a0b\u5e8f\u5458\u7f16\u5199\u6e05\u6670\u3001\u7b80\u6d01\u548c\u6613\u7ef4\u62a4\u7684\u4ee3\u7801\u80fd\u529b\u4ea7\u751f\u5de8\u5927\u5f71\u54cd\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u975e\u5e38\u5e9e\u5927\u7684\u7cfb\u7edf\u3002\u4f8b\u5982\uff0c\u65e9\u671f\u7684Basic\u4e0eCommon Lisp\u6216Ada\u4e4b\u95f4\u662f\u65e0\u6cd5\u6bd4\u8f83\u7684\u3002\u6784\u6210\u8868\u8fbe\u80fd\u529b\u7684\u56e0\u7d20\u2014\u2014\u5c24\u5176\u662f\u62bd\u8c61\u8bbe\u65bd\u2014\u2014\u662f\u672c\u4e66\u7684\u4e3b\u8981\u5173\u6ce8\u70b9\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"ease-of-use-for-the-novice",children:"Ease of Use for the Novice."}),"\n",(0,t.jsx)(a.p,{children:"While it is easy to pick on Basic, one cannot deny its success. Part of that success is due to its very low \u201clearning curve.\u201d Logo is popular among elementary-level educators for a similar reason: even a 5-year-old can learn it. Pascal was taught for many years in introductory programming language courses because, at least in comparison to other \u201cserious\u201d languages, it is compact and easy to learn. In recent years Java has come to play a similar role. Though substantially more complex than Pascal, it is much simpler than, say, C++."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u867d\u7136\u6279\u8bc4Basic\u5f88\u5bb9\u6613\uff0c\u4f46\u4eba\u4eec\u65e0\u6cd5\u5426\u8ba4\u5b83\u7684\u6210\u529f\u3002\u5b83\u7684\u6210\u529f\u90e8\u5206\u5f52\u529f\u4e8e\u5176\u975e\u5e38\u4f4e\u7684\u201c\u5b66\u4e60\u66f2\u7ebf\u201d\u3002\u7c7b\u4f3c\u7684\u539f\u56e0\uff0cLogo\u5728\u5c0f\u5b66\u6559\u80b2\u8005\u4e2d\u5f88\u53d7\u6b22\u8fce\uff1a\u751a\u81f35\u5c81\u7684\u5b69\u5b50\u90fd\u53ef\u4ee5\u5b66\u4f1a\u3002Pascal\u5728\u5f88\u591a\u5e74\u91cc\u88ab\u7528\u6765\u6559\u6388\u5165\u95e8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u8bfe\u7a0b\uff0c\u56e0\u4e3a\u81f3\u5c11\u4e0e\u5176\u4ed6\u201c\u4e25\u8083\u201d\u7684\u8bed\u8a00\u76f8\u6bd4\uff0c\u5b83\u66f4\u4e3a\u7b80\u6d01\u4e14\u6613\u5b66\u3002\u8fd1\u5e74\u6765\uff0cJava\u4e5f\u5f00\u59cb\u626e\u6f14\u7c7b\u4f3c\u7684\u89d2\u8272\u3002\u867d\u7136\u6bd4Pascal\u590d\u6742\u5f97\u591a\uff0c\u4f46\u5b83\u6bd4\u5982C++\u7b49\u8bed\u8a00\u7b80\u5355\u5f97\u591a\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"ease-of-implementation",children:"Ease of Implementation."}),"\n",(0,t.jsx)(a.p,{children:"In addition to its low learning curve, Basic is successful because it could be implemented easily on tiny machines, with limited resources. Forth has a small but dedicated following for similar reasons. Arguably the single most important factor in the success of Pascal was that its designer, Niklaus Wirth, developed a simple, portable implementation of the language, and shipped it free to universities all over the world (see Example 1.15).4 The Java designers took similar steps to make their language available for free to almost anyone who wants it."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u9664\u4e86\u5176\u4f4e\u5b66\u4e60\u66f2\u7ebf\u4e4b\u5916\uff0cBasic\u4e4b\u6240\u4ee5\u6210\u529f\uff0c\u8fd8\u56e0\u4e3a\u5b83\u53ef\u4ee5\u8f7b\u677e\u5728\u8d44\u6e90\u6709\u9650\u7684\u5c0f\u578b\u8bbe\u5907\u4e0a\u5b9e\u73b0\u3002Forth\u4e5f\u56e0\u7c7b\u4f3c\u7684\u539f\u56e0\u62e5\u6709\u4e00\u5c0f\u90e8\u5206\u5fe0\u5b9e\u7684\u8ffd\u968f\u8005\u3002\u53ef\u4ee5\u8bf4\uff0cPascal\u6210\u529f\u7684\u6700\u91cd\u8981\u56e0\u7d20\u4e4b\u4e00\u662f\u5176\u8bbe\u8ba1\u8005\u5c3c\u53e4\u62c9\u65af\xb7\u6c83\u65af\uff08Niklaus Wirth\uff09\u5f00\u53d1\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u53ef\u79fb\u690d\u7684\u8bed\u8a00\u5b9e\u73b0\uff0c\u5e76\u514d\u8d39\u63d0\u4f9b\u7ed9\u5168\u7403\u5404\u5730\u7684\u5927\u5b66\uff08\u89c1\u793a\u4f8b1.15\uff09\u3002Java\u7684\u8bbe\u8ba1\u8005\u4eec\u4e5f\u91c7\u53d6\u4e86\u7c7b\u4f3c\u7684\u63aa\u65bd\uff0c\u8ba9\u4ed6\u4eec\u7684\u8bed\u8a00\u51e0\u4e4e\u53ef\u4ee5\u514d\u8d39\u63d0\u4f9b\u7ed9\u4efb\u4f55\u60f3\u8981\u4f7f\u7528\u5b83\u7684\u4eba\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"standardization",children:"Standardization."}),"\n",(0,t.jsx)(a.p,{children:"Almost every widely used language has an official international standard or (in the case of several scripting languages) a single canonical implementation; and in the latter case the canonical implementation is almost invariably written in a language that has a standard. Standardization\u2014of both the language and a broad set of libraries\u2014is the only truly effective way to ensure the portability of code across platforms. The relatively impoverished standard for Pascal, which is missing several features considered essential by many programmers (separate compilation, strings, static initialization, random-access I/O), is at least partially responsible for the language\u2019s drop from favor in the 1980s. Many of these features were implemented in different ways by different vendors."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u51e0\u4e4e\u6bcf\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u4e00\u4e2a\u5b98\u65b9\u7684\u56fd\u9645\u6807\u51c6\uff0c\u6216\u8005\uff08\u5728\u4e00\u4e9b\u811a\u672c\u8bed\u8a00\u7684\u60c5\u51b5\u4e0b\uff09\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u89c4\u8303\u5b9e\u73b0\uff1b\u800c\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u89c4\u8303\u5b9e\u73b0\u51e0\u4e4e\u603b\u662f\u7528\u4e00\u79cd\u6709\u6807\u51c6\u7684\u8bed\u8a00\u7f16\u5199\u3002\u6807\u51c6\u5316\u2014\u2014\u65e0\u8bba\u662f\u8bed\u8a00\u672c\u8eab\u8fd8\u662f\u4e00\u5957\u5e7f\u6cdb\u7684\u5e93\u2014\u2014\u662f\u786e\u4fdd\u4ee3\u7801\u5728\u5404\u79cd\u5e73\u53f0\u4e0a\u53ef\u79fb\u690d\u7684\u552f\u4e00\u771f\u6b63\u6709\u6548\u7684\u65b9\u6cd5\u3002Pascal\u7684\u6807\u51c6\u76f8\u5bf9\u8f83\u4e3a\u7b80\u964b\uff0c\u7f3a\u5c11\u8bb8\u591a\u88ab\u8bb8\u591a\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u529f\u80fd\uff08\u5982\u72ec\u7acb\u7f16\u8bd1\u3001\u5b57\u7b26\u4e32\u3001\u9759\u6001\u521d\u59cb\u5316\u3001\u968f\u673a\u8bbf\u95eeI/O\uff09\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bfc\u81f4\u4e86\u8be5\u8bed\u8a00\u572820\u4e16\u7eaa80\u5e74\u4ee3\u5931\u5ba0\u3002\u8bb8\u591a\u8fd9\u4e9b\u529f\u80fd\u662f\u7531\u4e0d\u540c\u7684\u4f9b\u5e94\u5546\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"open-source",children:"Open Source."}),"\n",(0,t.jsx)(a.p,{children:"Most programming languages today have at least one open-source compiler or interpreter, but some languages\u2014C in particular\u2014are much more closely associated than others with freely distributed, peer-reviewed, community-supported computing. C was originally developed in the early 1970s by Dennis Ritchie and Ken Thompson at Bell Labs,5 in conjunction with the design of the original Unix operating system. Over the years Unix evolved into the world\u2019s most portable operating system\u2014the OS of choice for academic computer science\u2014and C was closely associated with it. With the standardization of C, the language has become available on an enormous variety of additional platforms. Linux, the leading open-source operating system, is written in C. As of October 2008, C and its descendants account for 66% of the projects hosted at the sourceforge.net repository."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u5982\u4eca\uff0c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u81f3\u5c11\u90fd\u6709\u4e00\u4e2a\u5f00\u6e90\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\uff0c\u4f46\u6709\u4e9b\u8bed\u8a00\u2014\u2014\u5c24\u5176\u662fC\u8bed\u8a00\u2014\u2014\u4e0e\u81ea\u7531\u5206\u53d1\u3001\u540c\u884c\u8bc4\u5ba1\u3001\u793e\u533a\u652f\u6301\u7684\u8ba1\u7b97\u5bc6\u5207\u76f8\u5173\u3002C\u8bed\u8a00\u6700\u521d\u662f\u572820\u4e16\u7eaa70\u5e74\u4ee3\u521d\u7531\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u4e39\u5c3c\u65af\xb7\u91cc\u5947\uff08Dennis Ritchie\uff09\u548c\u80af\xb7\u6c64\u666e\u900a\uff08Ken Thompson\uff09\u5f00\u53d1\u7684\uff0c\u540c\u65f6\u4e5f\u662f\u4e0e\u6700\u521d\u7684Unix\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u76f8\u5173\u8054\u7684\u3002\u591a\u5e74\u6765\uff0cUnix\u53d1\u5c55\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5177\u53ef\u79fb\u690d\u6027\u7684\u64cd\u4f5c\u7cfb\u7edf\u2014\u2014\u6210\u4e3a\u5b66\u672f\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u9996\u9009\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5e76\u4e0eC\u8bed\u8a00\u5bc6\u5207\u76f8\u5173\u3002\u968f\u7740C\u8bed\u8a00\u7684\u6807\u51c6\u5316\uff0c\u8be5\u8bed\u8a00\u5df2\u7ecf\u53ef\u4ee5\u5728\u5927\u91cf\u989d\u5916\u7684\u5e73\u53f0\u4e0a\u4f7f\u7528\u3002\u9886\u5148\u7684\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edfLinux\u5c31\u662f\u7528C\u8bed\u8a00\u7f16\u5199\u7684\u3002\u622a\u81f32008\u5e7410\u6708\uff0c\u5728sourceforge.net\u4ee3\u7801\u5e93\u6258\u7ba1\u7684\u9879\u76ee\u4e2d\uff0cC\u8bed\u8a00\u53ca\u5176\u884d\u751f\u7248\u672c\u5360\u4e8666%\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"excellent-compilers",children:"Excellent Compilers."}),"\n",(0,t.jsx)(a.p,{children:"Fortran owes much of its success to extremely good compilers. In part this is a matter of historical accident. Fortran has been around longer than anything else, and companies have invested huge amounts of time and money in making compilers that generate very fast code. It is also a matter of language design, however: Fortran dialects prior to Fortran 90 lack recursion and pointers, features that greatly complicate the task of generating fast code (at least for programs that can be written in a reasonable fashion without them!). In a similar vein, some languages (e.g., Common Lisp) are successful in part because they have compilers and supporting tools that do an unusually good job of helping the programmer manage very large projects."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"Fortran\u7684\u6210\u529f\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f52\u529f\u4e8e\u975e\u5e38\u4f18\u79c0\u7684\u7f16\u8bd1\u5668\u3002\u90e8\u5206\u539f\u56e0\u662f\u5386\u53f2\u7684\u5076\u7136\u6027\u3002Fortran\u7684\u5386\u53f2\u6bd4\u5176\u4ed6\u4efb\u4f55\u8bed\u8a00\u90fd\u8981\u60a0\u4e45\uff0c\u8bb8\u591a\u516c\u53f8\u6295\u5165\u4e86\u5927\u91cf\u65f6\u95f4\u548c\u8d44\u91d1\u6765\u5f00\u53d1\u80fd\u591f\u751f\u6210\u975e\u5e38\u9ad8\u6548\u4ee3\u7801\u7684\u7f16\u8bd1\u5668\u3002\u7136\u800c\uff0c\u8fd9\u4e5f\u4e0e\u8bed\u8a00\u8bbe\u8ba1\u6709\u5173\uff1aFortran 90\u4e4b\u524d\u7684\u65b9\u8a00\u7f3a\u4e4f\u9012\u5f52\u548c\u6307\u9488\uff0c\u8fd9\u4e9b\u7279\u6027\u4f1a\u6781\u5927\u5730\u590d\u6742\u5316\u751f\u6210\u9ad8\u6548\u4ee3\u7801\u7684\u4efb\u52a1\uff08\u81f3\u5c11\u5bf9\u4e8e\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u5b83\u4eec\u7684\u60c5\u51b5\u4e0b\u4ee5\u5408\u7406\u65b9\u5f0f\u7f16\u5199\u7684\u7a0b\u5e8f\u6765\u8bf4\u662f\u5982\u6b64\uff01\uff09\u3002\u7c7b\u4f3c\u5730\uff0c\u4e00\u4e9b\u8bed\u8a00\uff08\u4f8b\u5982Common Lisp\uff09\u4e4b\u6240\u4ee5\u6210\u529f\uff0c\u90e8\u5206\u539f\u56e0\u5728\u4e8e\u5b83\u4eec\u5177\u6709\u7f16\u8bd1\u5668\u548c\u652f\u6301\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u5728\u5e2e\u52a9\u7a0b\u5e8f\u5458\u7ba1\u7406\u975e\u5e38\u5927\u578b\u9879\u76ee\u65b9\u9762\u505a\u5f97\u5f02\u5e38\u51fa\u8272\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"economics-patronage-and-inertia",children:"Economics, Patronage, and Inertia."}),"\n",(0,t.jsx)(a.p,{children:"Finally, there are factors other than technical merit that greatly influence success. The backing of a powerful sponsor is one. PL/I, at least to first approximation, owes its life to IBM. Cobol and, more recently, Ada owe their life to the U.S. Department of Defense: Ada contains a wealth of excellent features and ideas, but the sheer complexity of implementation would likely have killed it if not for the DoD backing. Similarly, C#, despite its technical merits, would probably not have received the attention it has without the backing of Microsoft. At the other end of the life cycle, some languages remain widely used long after \u201cbetter\u201d alternatives are available because of a huge base of installed software and programmer expertise, which would cost too much to replace."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u6700\u540e\uff0c\u9664\u4e86\u6280\u672f\u4f18\u52bf\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u56e0\u7d20\u6781\u5927\u5730\u5f71\u54cd\u7740\u6210\u529f\u3002\u5f3a\u5927\u8d5e\u52a9\u5546\u7684\u652f\u6301\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u4f8b\u5982\uff0cPL/I\u81f3\u5c11\u5728\u6700\u521d\u9636\u6bb5\uff0c\u5f52\u529f\u4e8eIBM\u3002Cobol\u548c\u6700\u8fd1\u7684Ada\u90fd\u5f52\u529f\u4e8e\u7f8e\u56fd\u56fd\u9632\u90e8\uff1aAda\u5305\u542b\u4e86\u5927\u91cf\u51fa\u8272\u7684\u7279\u6027\u548c\u60f3\u6cd5\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u7f8e\u56fd\u56fd\u9632\u90e8\u7684\u652f\u6301\uff0c\u5176\u5b9e\u73b0\u7684\u590d\u6742\u6027\u5f88\u53ef\u80fd\u4f1a\u4f7f\u5176\u96be\u4ee5\u751f\u5b58\u3002\u540c\u6837\uff0c\u5c3d\u7ba1C#\u5728\u6280\u672f\u4e0a\u6709\u5176\u4f18\u70b9\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u5fae\u8f6f\u7684\u652f\u6301\uff0c\u5b83\u53ef\u80fd\u4e0d\u4f1a\u5f97\u5230\u5982\u4eca\u7684\u5173\u6ce8\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4e00\u4e9b\u8bed\u8a00\u5728\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u51fa\u73b0\u540e\u4ecd\u7136\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5df2\u5b89\u88c5\u7684\u8f6f\u4ef6\u548c\u7a0b\u5e8f\u5458\u7684\u4e13\u4e1a\u77e5\u8bc6\u5e9e\u5927\uff0c\u66ff\u6362\u5b83\u4eec\u7684\u6210\u672c\u592a\u9ad8\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Clearly no single factor determines whether a language is \u201cgood.\u201d As we study programming languages, we shall need to consider issues from several points of view. In particular, we shall need to consider the viewpoints of both the programmer and the language implementor. Sometimes these points of view will be in harmony, as in the desire for execution speed. Often, however, there will be conflicts and tradeoffs, as the conceptual appeal of a feature is balanced against the cost of its implementation. The tradeoff becomes particularly thorny when the implementation imposes costs not only on programs that use the feature, but also on programs that do not."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u663e\u7136\uff0c\u6ca1\u6709\u5355\u4e00\u56e0\u7d20\u80fd\u51b3\u5b9a\u4e00\u79cd\u8bed\u8a00\u662f\u5426\u201c\u4f18\u79c0\u201d\u3002\u5728\u7814\u7a76\u7f16\u7a0b\u8bed\u8a00\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4ece\u591a\u4e2a\u89d2\u5ea6\u8003\u8651\u95ee\u9898\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7a0b\u5e8f\u5458\u548c\u8bed\u8a00\u5b9e\u73b0\u8005\u7684\u89c2\u70b9\u3002\u6709\u65f6\u8fd9\u4e9b\u89c2\u70b9\u4f1a\u4fdd\u6301\u4e00\u81f4\uff0c\u6bd4\u5982\u5bf9\u6267\u884c\u901f\u5ea6\u7684\u6e34\u671b\u3002\u7136\u800c\uff0c\u901a\u5e38\u4f1a\u5b58\u5728\u51b2\u7a81\u548c\u6743\u8861\uff0c\u6bd4\u5982\u67d0\u9879\u7279\u6027\u7684\u6982\u5ff5\u5438\u5f15\u529b\u4e0e\u5176\u5b9e\u73b0\u6210\u672c\u4e4b\u95f4\u7684\u5e73\u8861\u3002\u5f53\u5b9e\u73b0\u4e0d\u4ec5\u7ed9\u4f7f\u7528\u8be5\u7279\u6027\u7684\u7a0b\u5e8f\u5e26\u6765\u6210\u672c\uff0c\u800c\u4e14\u4e5f\u7ed9\u4e0d\u4f7f\u7528\u8be5\u7279\u6027\u7684\u7a0b\u5e8f\u5e26\u6765\u6210\u672c\u65f6\uff0c\u8fd9\u79cd\u6743\u8861\u53d8\u5f97\u7279\u522b\u68d8\u624b\u3002"}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"In the early days of computing the implementor\u2019s viewpoint was predominant. Programming languages evolved as a means of telling a computer what to do. For programmers, however, a language is more aptly defined as a means of expressing algorithms. Just as natural languages constrain exposition and discourse, so programming languages constrain what can and cannot easily be expressed, and have both profound and subtle influence over what the programmer can think. Donald Knuth has suggested that programming be regarded as the art of telling another human being what one wants the computer to do [Knu84].6 This definition perhaps strikes the best sort of compromise. It acknowledges that both conceptual clarity and implementation efficiency are fundamental concerns. This book attempts to capture this spirit of compromise,by simultaneously considering the conceptual and implementation aspects of each of the topics it covers."}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsx)(a.p,{children:"\u5728\u8ba1\u7b97\u673a\u7684\u65e9\u671f\u53d1\u5c55\u9636\u6bb5\uff0c\u5b9e\u73b0\u8005\u7684\u89c2\u70b9\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\u7f16\u7a0b\u8bed\u8a00\u6f14\u53d8\u4e3a\u544a\u8bc9\u8ba1\u7b97\u673a\u8be5\u505a\u4ec0\u4e48\u7684\u624b\u6bb5\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u8bed\u8a00\u66f4\u6070\u5f53\u5730\u88ab\u5b9a\u4e49\u4e3a\u8868\u8fbe\u7b97\u6cd5\u7684\u624b\u6bb5\u3002\u5c31\u50cf\u81ea\u7136\u8bed\u8a00\u9650\u5236\u4e86\u8868\u8ff0\u548c\u4ea4\u6d41\u4e00\u6837\uff0c\u7f16\u7a0b\u8bed\u8a00\u4e5f\u9650\u5236\u4e86\u4ec0\u4e48\u53ef\u4ee5\u548c\u4e0d\u80fd\u8f7b\u677e\u5730\u8868\u8fbe\uff0c\u5e76\u5bf9\u7a0b\u5e8f\u5458\u7684\u601d\u7ef4\u4ea7\u751f\u6df1\u8fdc\u800c\u5fae\u5999\u7684\u5f71\u54cd\u3002Donald Knuth\u66fe\u5efa\u8bae\u5c06\u7f16\u7a0b\u89c6\u4e3a\u544a\u8bc9\u53e6\u4e00\u4e2a\u4eba\u60f3\u8ba9\u8ba1\u7b97\u673a\u505a\u4ec0\u4e48\u7684\u827a\u672f\u3002\u8fd9\u4e2a\u5b9a\u4e49\u6216\u8bb8\u8fbe\u5230\u4e86\u6700\u597d\u7684\u6298\u8877\u3002\u5b83\u627f\u8ba4\u4e86\u6982\u5ff5\u4e0a\u7684\u6e05\u6670\u548c\u5b9e\u73b0\u6548\u7387\u90fd\u662f\u57fa\u672c\u5173\u6ce8\u70b9\u3002\u672c\u4e66\u8bd5\u56fe\u6355\u6349\u8fd9\u79cd\u6298\u8877\u7684\u7cbe\u795e\uff0c\u540c\u65f6\u8003\u8651\u6240\u6db5\u76d6\u4e3b\u9898\u7684\u6982\u5ff5\u548c\u5b9e\u73b0\u65b9\u9762\u3002"}),"\n"]})]})}function d(e={}){const{wrapper:a}={...(0,o.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>r,a:()=>i});var t=n(7294);const o={},s=t.createContext(o);function i(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);