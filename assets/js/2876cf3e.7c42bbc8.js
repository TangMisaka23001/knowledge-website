"use strict";(self.webpackChunkmy_knowledge_repo=self.webpackChunkmy_knowledge_repo||[]).push([[4026],{2178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(5893),i=n(1151);const r={title:"\u7b2c\u56db\u7ae0",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},s=void 0,o={id:"technical/programming-language-pragmatics/05",title:"\u7b2c\u56db\u7ae0",description:"Semantic Analysis",source:"@site/docs/technical/programming-language-pragmatics/05.md",sourceDirName:"technical/programming-language-pragmatics",slug:"/technical/programming-language-pragmatics/05",permalink:"/docs/technical/programming-language-pragmatics/05",draft:!1,unlisted:!1,tags:[{label:"\u7f16\u8bd1\u5668",permalink:"/docs/tags/\u7f16\u8bd1\u5668"},{label:"Programming Language Pragmatics",permalink:"/docs/tags/programming-language-pragmatics"}],version:"current",frontMatter:{title:"\u7b2c\u56db\u7ae0",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},sidebar:"technical",previous:{title:"\u7b2c\u4e09\u7ae0",permalink:"/docs/technical/programming-language-pragmatics/04"}},l={},c=[{value:"Semantic Analysis",id:"semantic-analysis",level:2},{value:"The Role of the Semantic Analyzer",id:"the-role-of-the-semantic-analyzer",level:3},{value:"Dynamic Checks",id:"dynamic-checks",level:4},{value:"Assertions",id:"assertions",level:4},{value:"Static Analysis",id:"static-analysis",level:4},{value:"Attribute Grammars",id:"attribute-grammars",level:3},{value:"Evaluating Attributes",id:"evaluating-attributes",level:3},{value:"Synthesized Attributes \u5408\u6210\u5c5e\u6027",id:"synthesized-attributes-\u5408\u6210\u5c5e\u6027",level:4},{value:"Inherited Attributes",id:"inherited-attributes",level:4},{value:"Attribute Flow",id:"attribute-flow",level:4},{value:"One-Pass Compilers",id:"one-pass-compilers",level:4},{value:"Action Routines",id:"action-routines",level:3},{value:"Space Management for Attributes",id:"space-management-for-attributes",level:3},{value:"Tree Grammars and Syntax Tree Decoration",id:"tree-grammars-and-syntax-tree-decoration",level:3},{value:"Summary and Concluding Remarks",id:"summary-and-concluding-remarks",level:3}];function d(e){const t={em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"semantic-analysis",children:"Semantic Analysis"}),"\n",(0,a.jsxs)(t.p,{children:["semantics concerns its ",(0,a.jsx)(t.strong,{children:"meaning"}),". Meaning is important for at least two reasons: it allows us to enforce rules (e.g., type consistency) that go beyond mere form, and it provides the information we need in order to generate an equivalent output program."]}),"\n",(0,a.jsxs)(t.p,{children:["Semantic rules are further divided into ",(0,a.jsx)(t.em,{children:"static"})," and ",(0,a.jsx)(t.em,{children:"dynamic"})," semantics"]}),"\n",(0,a.jsxs)(t.p,{children:["Both semantic analysis and intermediate code generation can be described in terms of annotation, or ",(0,a.jsx)(t.strong,{children:"decoration of a parse tree or syntax tree"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Attribute grammars"})," provide a formal framework for the decoration of a tree. This framework is a useful conceptual tool even in compilers that do not build a parse tree or syntax tree as an explicit data structure."]}),"\n",(0,a.jsx)(t.h3,{id:"the-role-of-the-semantic-analyzer",children:"The Role of the Semantic Analyzer"}),"\n",(0,a.jsx)(t.p,{children:"The role of the semantic analyzer is to enforce all static semantic rules and to annotate the program with information needed by the intermediate code generator."}),"\n",(0,a.jsx)(t.h4,{id:"dynamic-checks",children:"Dynamic Checks"}),"\n",(0,a.jsx)(t.p,{children:"Many compilers that generate code for dynamic checks provide the option of disabling them if desired."}),"\n",(0,a.jsx)(t.h4,{id:"assertions",children:"Assertions"}),"\n",(0,a.jsx)(t.p,{children:"The compiler then generates code to check the assertions at run time. An assertion is a statement that a specified condition is expected to be true when execution reaches a certain point in the code."}),"\n",(0,a.jsx)(t.h4,{id:"static-analysis",children:"Static Analysis"}),"\n",(0,a.jsx)(t.p,{children:"In general, compile-time algorithms that predict run-time behavior are known as static analysis."}),"\n",(0,a.jsx)(t.p,{children:"static analysis may enable code improvement:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"alias analysis"}),"\n",(0,a.jsx)(t.li,{children:"escape analysis"}),"\n",(0,a.jsx)(t.li,{children:"subtype analysis"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"attribute-grammars",children:"Attribute Grammars"}),"\n",(0,a.jsx)(t.p,{children:"To tie these expressions to mathematical concepts (as opposed to, say, floor tile patterns or dance steps), we need additional notation. The most common is based on attributes."}),"\n",(0,a.jsx)(t.p,{children:"In a compiler or interpreter for a full programming language, the attributes of tree nodes might include:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"for an identifier, a reference to information about it in the symbol table"}),"\n",(0,a.jsx)(t.li,{children:"for an expression, its type"}),"\n",(0,a.jsx)(t.li,{children:"for a statement or expression, a reference to corresponding code in the compiler\u2019s intermediate form"}),"\n",(0,a.jsx)(t.li,{children:"for almost any construct, an indication of the file name, line, and column where the corresponding source code begins"}),"\n",(0,a.jsx)(t.li,{children:"for any internal node, a list of semantic errors found in the subtree below"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"evaluating-attributes",children:"Evaluating Attributes"}),"\n",(0,a.jsx)(t.p,{children:"The process of evaluating attributes is called annotation or decoration of the parse tree."}),"\n",(0,a.jsx)(t.h4,{id:"synthesized-attributes-\u5408\u6210\u5c5e\u6027",children:"Synthesized Attributes \u5408\u6210\u5c5e\u6027"}),"\n",(0,a.jsx)(t.p,{children:"synthesized attributes: their values are calculated (synthesized) only in productions in which their symbol appears on the left-hand side."}),"\n",(0,a.jsx)(t.h4,{id:"inherited-attributes",children:"Inherited Attributes"}),"\n",(0,a.jsx)(t.p,{children:"In general, we can imagine (and will in fact have need of) attributes whose values are calculated when their symbol is on the right-hand side of the current production. Such attributes are said to be inherited."}),"\n",(0,a.jsx)(t.h4,{id:"attribute-flow",children:"Attribute Flow"}),"\n",(0,a.jsx)(t.p,{children:"they define a set of valid trees, but they don\u2019t say how to build or decorate them."}),"\n",(0,a.jsx)(t.p,{children:"the order in which attribute rules are listed for a given production is immaterial; attribute flow may require them to execute in any order."}),"\n",(0,a.jsxs)(t.p,{children:["An algorithm that decorates parse trees by invoking the rules of an attribute grammar in an order consistent with the tree\u2019s attribute flow is called a ",(0,a.jsx)(t.strong,{children:"translation scheme"}),"."]}),"\n",(0,a.jsx)(t.h4,{id:"one-pass-compilers",children:"One-Pass Compilers"}),"\n",(0,a.jsx)(t.p,{children:"A compiler that interleaves semantic analysis and code generation with parsing is said to be a one-pass compiler"}),"\n",(0,a.jsx)(t.h3,{id:"action-routines",children:"Action Routines"}),"\n",(0,a.jsx)(t.p,{children:"An ad hoc translation scheme that is interleaved with parsing takes the form of a set of action routines."}),"\n",(0,a.jsx)(t.p,{children:"An action routine is a semantic function that the programmer (grammar writer) instructs the compiler to execute at a particular point in the parse."}),"\n",(0,a.jsx)(t.h3,{id:"space-management-for-attributes",children:"Space Management for Attributes"}),"\n",(0,a.jsx)(t.p,{children:"If we are building an explicit parse tree, then the obvious approach is to store attributes in the nodes of the tree themselves."}),"\n",(0,a.jsxs)(t.p,{children:["For a bottom-up parser with an S-attributed grammar, the obvious approach is to maintain an ",(0,a.jsx)(t.strong,{children:"attribute stack"})]}),"\n",(0,a.jsx)(t.p,{children:"For a top-down parser with an L-attributed grammar, we have two principal options:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"uses an attribute stack"}),"\n",(0,a.jsx)(t.li,{children:"\u201cshortcutting\u201d copy rules"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"tree-grammars-and-syntax-tree-decoration",children:"Tree Grammars and Syntax Tree Decoration"}),"\n",(0,a.jsx)(t.p,{children:"attribute grammars can also be used to decorate syntax trees."}),"\n",(0,a.jsx)(t.h3,{id:"summary-and-concluding-remarks",children:"Summary and Concluding Remarks"}),"\n",(0,a.jsx)(t.p,{children:"\u672c\u7ae0\u8ba8\u8bba\u4e86\u8bed\u4e49\u5206\u6790\u7684\u4efb\u52a1\u3002\u6211\u4eec\u56de\u987e\u4e86\u53ef\u4ee5\u5206\u7c7b\u4e3a\u8bed\u6cd5\u3001\u9759\u6001\u8bed\u4e49\u548c\u52a8\u6001\u8bed\u4e49\u7684\u8bed\u8a00\u89c4\u5219\u7c7b\u578b\uff0c\u5e76\u8ba8\u8bba\u4e86\u662f\u5426\u751f\u6210\u4ee3\u7801\u4ee5\u6267\u884c\u52a8\u6001\u8bed\u4e49\u68c0\u67e5\u7684\u95ee\u9898\u3002\u6211\u4eec\u8fd8\u8003\u8651\u4e86\u8bed\u4e49\u5206\u6790\u5668\u5728\u5178\u578b\u7f16\u8bd1\u5668\u4e2d\u7684\u4f5c\u7528\u3002\u6211\u4eec\u6307\u51fa\uff0c\u9759\u6001\u8bed\u4e49\u89c4\u5219\u7684\u6267\u884c\u548c\u4e2d\u95f4\u4ee3\u7801\u7684\u751f\u6210\u90fd\u53ef\u4ee5\u7528\u89e3\u6790\u6811\u6216\u8bed\u6cd5\u6811\u7684\u6ce8\u91ca\u6216\u88c5\u9970\u6765\u8868\u8fbe\u3002\u7136\u540e\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u5c5e\u6027\u6587\u6cd5\u4f5c\u4e3a\u8fd9\u4e2a\u88c5\u9970\u8fc7\u7a0b\u7684\u5f62\u5f0f\u5316\u6846\u67b6\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u5c5e\u6027\u6587\u6cd5\u5c06\u5c5e\u6027\u4e0e\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u6216\u6811\u6587\u6cd5\u4e2d\u7684\u6bcf\u4e2a\u7b26\u53f7\u5173\u8054\uff0c\u5e76\u5c06\u5c5e\u6027\u89c4\u5219\u4e0e\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u5173\u8054\u8d77\u6765\u3002\u5728\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u4e2d\uff0c\u7efc\u5408\u5c5e\u6027\u53ea\u5728\u5176\u7b26\u53f7\u51fa\u73b0\u5728\u4ea7\u751f\u5f0f\u7684\u5de6\u4fa7\u65f6\u8ba1\u7b97\u3002\u6807\u8bb0\u7684\u7efc\u5408\u5c5e\u6027\u7531\u626b\u63cf\u5668\u521d\u59cb\u5316\u3002\u7ee7\u627f\u5c5e\u6027\u5728\u5176\u7b26\u53f7\u51fa\u73b0\u5728\u53f3\u4fa7\u7684\u4ea7\u751f\u5f0f\u4e2d\u8ba1\u7b97\uff1b\u5b83\u4eec\u5141\u8bb8\u7b26\u53f7\u4e0b\u5b50\u6811\u4e2d\u7684\u8ba1\u7b97\u4f9d\u8d56\u4e8e\u7b26\u53f7\u51fa\u73b0\u7684\u4e0a\u4e0b\u6587\u3002\u8d77\u59cb\u7b26\u53f7\uff08\u76ee\u6807\uff09\u7684\u7ee7\u627f\u5c5e\u6027\u53ef\u4ee5\u8868\u793a\u7f16\u8bd1\u5668\u7684\u5916\u90e8\u73af\u5883\u3002\u4e25\u683c\u6765\u8bf4\uff0c\u5c5e\u6027\u6587\u6cd5\u53ea\u5141\u8bb8\u590d\u5236\u89c4\u5219\uff08\u4e00\u4e2a\u5c5e\u6027\u5206\u914d\u7ed9\u53e6\u4e00\u4e2a\u5c5e\u6027\uff09\u548c\u5bf9\u8bed\u4e49\u51fd\u6570\u7684\u7b80\u5355\u8c03\u7528\uff0c\u4f46\u6211\u4eec\u901a\u5e38\u653e\u5bbd\u8fd9\u4e00\u9650\u5236\uff0c\u4ee5\u5141\u8bb8\u5728\u67d0\u4e9b\u73b0\u6709\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\u66f4\u591a\u6216\u66f4\u5c11\u4efb\u610f\u7684\u4ee3\u7801\u7247\u6bb5\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u5c31\u50cf\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u53ef\u4ee5\u6839\u636e\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u7684\u89e3\u6790\u7b97\u6cd5\u8fdb\u884c\u5206\u7c7b\u4e00\u6837\uff0c\u5c5e\u6027\u6587\u6cd5\u53ef\u4ee5\u6839\u636e\u5176\u5c5e\u6027\u6d41\u6a21\u5f0f\u7684\u590d\u6742\u6027\u8fdb\u884c\u5206\u7c7b\u3002\u5728S-\u5c5e\u6027\u6587\u6cd5\u4e2d\uff0c\u6240\u6709\u5c5e\u6027\u90fd\u662f\u7efc\u5408\u7684\uff0c\u53ef\u4ee5\u81ea\u7136\u5730\u5728\u89e3\u6790\u6811\u4e0a\u8fdb\u884c\u5355\u6b21\u81ea\u5e95\u5411\u4e0a\u904d\u5386\uff0c\u6309\u7167LR\u65cf\u89e3\u6790\u5668\u53d1\u73b0\u6811\u7684\u987a\u5e8f\u7cbe\u786e\u8ba1\u7b97\u3002\u5728L-\u5c5e\u6027\u6587\u6cd5\u4e2d\uff0c\u6240\u6709\u5c5e\u6027\u6d41\u90fd\u662f\u6df1\u5ea6\u4f18\u5148\u4ece\u5de6\u5230\u53f3\u7684\uff0c\u53ef\u4ee5\u6309\u7167LL\u65cf\u89e3\u6790\u5668\u9884\u6d4b\u548c\u5339\u914d\u89e3\u6790\u6811\u7684\u987a\u5e8f\u7cbe\u786e\u8ba1\u7b97\u3002\u5177\u6709\u66f4\u590d\u6742\u5c5e\u6027\u6d41\u6a21\u5f0f\u7684\u5c5e\u6027\u6587\u6cd5\u901a\u5e38\u4e0d\u7528\u4e8e\u751f\u6210\u7f16\u8bd1\u5668\u7684\u89e3\u6790\u6811\uff0c\u4f46\u5bf9\u4e8e\u57fa\u4e8e\u8bed\u6cd5\u7684\u7f16\u8f91\u5668\u3001\u589e\u91cf\u7f16\u8bd1\u5668\u548c\u5176\u4ed6\u5404\u79cd\u5de5\u5177\u975e\u5e38\u6709\u4ef7\u503c\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u867d\u7136\u53ef\u4ee5\u6784\u5efa\u81ea\u52a8\u5de5\u5177\u6765\u5206\u6790\u5c5e\u6027\u6d41\u5e76\u88c5\u9970\u89e3\u6790\u6811\uff0c\u4f46\u5927\u591a\u6570\u7f16\u8bd1\u5668\u4f9d\u8d56\u4e8e\u52a8\u4f5c\u4f8b\u7a0b\uff0c\u7f16\u8bd1\u5668\u7f16\u5199\u8005\u5c06\u8fd9\u4e9b\u4f8b\u7a0b\u5d4c\u5165\u5230\u4ea7\u751f\u5f0f\u7684\u53f3\u4fa7\uff0c\u4ee5\u5728\u89e3\u6790\u7684\u7279\u5b9a\u70b9\u8bc4\u4f30\u5c5e\u6027\u89c4\u5219\u3002\u5728LL\u65cf\u89e3\u6790\u5668\u4e2d\uff0c\u52a8\u4f5c\u4f8b\u7a0b\u53ef\u4ee5\u5d4c\u5165\u5230\u4ea7\u751f\u5f0f\u53f3\u4fa7\u7684\u4efb\u610f\u70b9\u3002\u5728LR\u65cf\u89e3\u6790\u5668\u4e2d\uff0c\u52a8\u4f5c\u4f8b\u7a0b\u5fc5\u987b\u9075\u5faa\u4ea7\u751f\u5f0f\u7684\u5de6\u89d2\u3002\u81ea\u5e95\u5411\u4e0a\u7f16\u8bd1\u5668\u4e2d\u7684\u5c5e\u6027\u7a7a\u95f4\u81ea\u7136\u5730\u4e0e\u89e3\u6790\u6808\u5e76\u884c\u5206\u914d\uff0c\u4f46\u8fd9\u4f7f\u5f97\u7ee7\u627f\u5c5e\u6027\u7684\u7ba1\u7406\u53d8\u5f97\u590d\u6742\u3002\u81ea\u9876\u5411\u4e0b\u7f16\u8bd1\u5668\u4e2d\u7684\u5c5e\u6027\u7a7a\u95f4\u53ef\u4ee5\u81ea\u52a8\u5206\u914d\uff0c\u6216\u7531\u52a8\u4f5c\u4f8b\u7a0b\u7684\u7f16\u5199\u8005\u663e\u5f0f\u7ba1\u7406\u3002\u81ea\u52a8\u65b9\u6cd5\u5177\u6709\u89c4\u5f8b\u6027\u7684\u4f18\u52bf\uff0c\u5e76\u4e14\u66f4\u6613\u4e8e\u7ef4\u62a4\uff1b\u800c\u4e34\u65f6\u65b9\u6cd5\u7565\u5feb\u4e14\u66f4\u7075\u6d3b\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u5728\u5355\u904d\u7f16\u8bd1\u5668\u4e2d\uff0c\u626b\u63cf\u3001\u89e3\u6790\u3001\u8bed\u4e49\u5206\u6790\u548c\u4ee3\u7801\u751f\u6210\u5728\u5bf9\u8f93\u5165\u7684\u5355\u6b21\u904d\u5386\u4e2d\u4ea4\u66ff\u8fdb\u884c\u3002\u8bed\u4e49\u51fd\u6570\u6216\u52a8\u4f5c\u4f8b\u7a0b\u8d1f\u8d23\u6240\u6709\u7684\u8bed\u4e49\u5206\u6790\u548c\u4ee3\u7801\u751f\u6210\u3002\u66f4\u5e38\u89c1\u7684\u505a\u6cd5\u662f\uff0c\u52a8\u4f5c\u4f8b\u7a0b\u4ec5\u6784\u5efa\u4e00\u4e2a\u8bed\u6cd5\u6811\uff0c\u7136\u540e\u5728\u540e\u7eed\u7684\u5355\u72ec\u904d\u5386\u4e2d\u5bf9\u5176\u8fdb\u884c\u88c5\u9970\u3002\u8fd9\u4e9b\u904d\u5386\u7684\u4ee3\u7801\u901a\u5e38\u662f\u624b\u5de5\u7f16\u5199\u7684\uff0c\u4ee5\u76f8\u4e92\u9012\u5f52\u7684\u5b50\u7a0b\u5e8f\u5f62\u5f0f\uff0c\u4f7f\u5f97\u7f16\u8bd1\u5668\u53ef\u4ee5\u5728\u8bed\u6cd5\u6811\u4e0a\u5b9e\u73b0\u57fa\u672c\u4e0a\u4efb\u610f\u7684\u5c5e\u6027\u6d41\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\uff08\u7279\u522b\u662f\u7b2c6\u81f3\u7b2c10\u7ae0\uff09\uff0c\u6211\u4eec\u5c06\u8003\u8651\u5404\u79cd\u5404\u6837\u7684\u7f16\u7a0b\u8bed\u8a00\u6784\u9020\u3002\u6211\u4eec\u4e0d\u4f1a\u5448\u73b0\u5b9e\u73b0\u8fd9\u4e9b\u6784\u9020\u6240\u9700\u7684\u5b9e\u9645\u5c5e\u6027\u6587\u6cd5\uff0c\u800c\u662f\u4f1a\u4ee5\u975e\u6b63\u5f0f\u7684\u65b9\u5f0f\u63cf\u8ff0\u5b83\u4eec\u7684\u8bed\u4e49\uff0c\u5e76\u7ed9\u51fa\u76ee\u6807\u4ee3\u7801\u7684\u793a\u4f8b\u3002\u5728\u7b2c15\u7ae0\u4e2d\uff0c\u5f53\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u65f6\uff0c\u6211\u4eec\u5c06\u56de\u987e\u5c5e\u6027\u6587\u6cd5\u3002"})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var a=n(7294);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);