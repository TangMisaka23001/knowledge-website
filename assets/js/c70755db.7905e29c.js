"use strict";(self.webpackChunkmy_knowledge_repo=self.webpackChunkmy_knowledge_repo||[]).push([[5753],{6605:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=i(5893),t=i(1151);const s={title:"\u7b2c\u4e09\u7ae0",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},r=void 0,o={id:"technical/programming-language-pragmatics/04",title:"\u7b2c\u4e09\u7ae0",description:"Names, Scopes, and Bindings",source:"@site/docs/technical/programming-language-pragmatics/04.md",sourceDirName:"technical/programming-language-pragmatics",slug:"/technical/programming-language-pragmatics/04",permalink:"/docs/technical/programming-language-pragmatics/04",draft:!1,unlisted:!1,tags:[{label:"\u7f16\u8bd1\u5668",permalink:"/docs/tags/\u7f16\u8bd1\u5668"},{label:"Programming Language Pragmatics",permalink:"/docs/tags/programming-language-pragmatics"}],version:"current",frontMatter:{title:"\u7b2c\u4e09\u7ae0",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]}},l={},c=[{value:"Names, Scopes, and Bindings",id:"names-scopes-and-bindings",level:2},{value:"The Notion of Binding Time",id:"the-notion-of-binding-time",level:3},{value:"Object Lifetime and Storage Management",id:"object-lifetime-and-storage-management",level:3},{value:"Static Allocation",id:"static-allocation",level:4},{value:"Stack-Based Allocation",id:"stack-based-allocation",level:4},{value:"Heap-Based Allocation",id:"heap-based-allocation",level:4},{value:"\u5185\u5b58\u7ba1\u7406\u5b58\u5728\u7684\u95ee\u9898\uff1a",id:"\u5185\u5b58\u7ba1\u7406\u5b58\u5728\u7684\u95ee\u9898",level:5},{value:"Garbage Collection",id:"garbage-collection",level:4},{value:"Scope Rules",id:"scope-rules",level:3},{value:"Static Scoping",id:"static-scoping",level:4},{value:"Nested Subroutines",id:"nested-subroutines",level:4},{value:"Declaration Order",id:"declaration-order",level:4},{value:"Declarations and Definitions",id:"declarations-and-definitions",level:5},{value:"Modules",id:"modules",level:4},{value:"Module Types and Classes",id:"module-types-and-classes",level:4},{value:"Dynamic Scoping",id:"dynamic-scoping",level:4},{value:"Implementing Scope",id:"implementing-scope",level:3},{value:"The Meaning of Names within a Scope",id:"the-meaning-of-names-within-a-scope",level:3},{value:"The Binding of Referencing Environments",id:"the-binding-of-referencing-environments",level:3},{value:"Subroutine Closures",id:"subroutine-closures",level:4},{value:"Object Closures",id:"object-closures",level:4},{value:"Macro Expansion",id:"macro-expansion",level:3},{value:"Summary and Concluding Remarks",id:"summary-and-concluding-remarks",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"names-scopes-and-bindings",children:"Names, Scopes, and Bindings"}),"\n",(0,a.jsx)(n.p,{children:"A name is a mnemonic character string used to represent something else."}),"\n",(0,a.jsx)(n.p,{children:"Names allow us to refer to variables, constants, operations, types, and so on using symbolic identifiers rather than low-level concepts like addresses."}),"\n",(0,a.jsx)(n.p,{children:"Subroutines are control abstractions."}),"\n",(0,a.jsx)(n.p,{children:"Classes are data abstractions."}),"\n",(0,a.jsx)(n.h3,{id:"the-notion-of-binding-time",children:"The Notion of Binding Time"}),"\n",(0,a.jsx)(n.p,{children:"the notion of binding time, which refers not only to the binding of a name to the thing it represents, but also in general to the notion of resolving any design decision in a language implementation."}),"\n",(0,a.jsx)(n.p,{children:"\u901a\u5e38\uff0c\u65e9\u671f\u7ed1\u5b9a\u65f6\u673a\u4e0e\u66f4\u9ad8\u7684\u6548\u7387\u76f8\u5173\uff0c\u800c\u540e\u671f\u7684\u7ed1\u5b9a\u65f6\u673a\u4e0e\u66f4\u5927\u7684\u7075\u6d3b\u6027\u76f8\u5173\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u4e0d\u540c\u7684\u4e1c\u897f\u7684\u7ed1\u5b9a\u65f6\u673a\u662f\u4e0d\u4e00\u6837\u7684\uff1a"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Language design time\uff1a\u63a7\u5236\u6d41\u7ed3\u6784\uff0c\u57fa\u672c\u7c7b\u578b\uff0c\u590d\u6742\u5bf9\u8c61\u7ec4\u7ec7\u65b9\u6cd5\u7b49\u8bed\u4e49\u65b9\u9762\u7684\u5185\u5bb9"}),"\n",(0,a.jsx)(n.li,{children:"Language implementation time\uff1a\u57fa\u7840\u7c7b\u578b\u5927\u5c0f\uff0c\u548c\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\uff0c\u5806\u548c\u6808\u7684\u7ec4\u7ec7\u65b9\u5f0f\u548c\u5927\u5c0f"}),"\n",(0,a.jsx)(n.li,{children:"Program writing time\uff1a\u7b97\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u547d\u540d"}),"\n",(0,a.jsx)(n.li,{children:"Compile time\uff1a\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u548c\u673a\u5668\u7801\u7684\u6620\u5c04\uff0c\u9759\u6001\u6570\u636e\u7684\u5185\u5b58\u5e03\u5c40"}),"\n",(0,a.jsx)(n.li,{children:"Link time\uff1a\u5f15\u7528\u5176\u4ed6\u7684\u6a21\u5757\u7684\u7ed1\u5b9a\u5173\u7cfb\u5230\u94fe\u63a5\u65f6\u624d\u80fd\u786e\u5b9a\uff08\u589e\u91cf\u7f16\u8bd1\uff09"}),"\n",(0,a.jsx)(n.li,{children:"Load time\uff1a\u7a0b\u5e8f\u88c5\u8f7d\u65f6\u624d\u80fd\u786e\u5b9a\u5b9e\u9645\u7684\u5730\u5740\uff08\u865a\u5b9e\u5730\u5740\u8f6c\u6362\uff09"}),"\n",(0,a.jsx)(n.li,{children:"Run time\uff1a\u53d8\u91cf\u503c\u7ed1\u5b9a\uff0c\u7a0b\u5e8f\u542f\u52a8\u65f6\u673a\uff0c\u6a21\u5757\u88c5\u8f7d\u65f6\u673a\uff0c\u9996\u6b21\u201c\u770b\u5230\u201d\u58f0\u660e\u7684\u65f6\u673a\uff0c\u5b50\u7a0b\u5e8f\u8c03\u7528\u65f6\u673a\uff0c\u4ee3\u7801\u5757\u8fdb\u5165\u65f6\u673a\uff0c\u8868\u8fbe\u5f0f\u6c42\u503c\u3001\u8bed\u53e5\u6267\u884c\u65f6\u673a"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Compiler-based language implementations tend to be more efficient than interpreter-based implementations because they make earlier decisions."}),"\n",(0,a.jsx)(n.h3,{id:"object-lifetime-and-storage-management",children:"Object Lifetime and Storage Management"}),"\n",(0,a.jsx)(n.p,{children:"The period of time between the creation and the destruction of a name-to-object binding is called the binding\u2019s lifetime."}),"\n",(0,a.jsx)(n.p,{children:"\u751f\u547d\u5468\u671f\u7ba1\u7406\u4e0d\u6b63\u786e\u80af\u80fd\u4f1a\u5bfc\u81f4\u201c\u60ac\u6302\u6307\u9488\u201d"}),"\n",(0,a.jsx)(n.p,{children:"\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u53d6\u51b3\u4e8e\u5b58\u50a8\u5206\u914d\u673a\u5236\uff08\u5bf9\u8c61\u7a7a\u95f4\uff09\uff1a"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u9759\u6001\u5bf9\u8c61\uff08\u7edd\u5bf9\u5730\u5740\uff09"}),"\n",(0,a.jsx)(n.li,{children:"\u6808\u5bf9\u8c61\uff08\u6808\u4e0a\u5206\u914d\uff0c\u901a\u5e38\u5728\u5b50\u7a0b\u5e8f\u8c03\u7528\uff09"}),"\n",(0,a.jsx)(n.li,{children:"\u5806\u5bf9\u8c61\uff08\u968f\u65f6\u5206\u914d\uff09"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"static-allocation",children:"Static Allocation"}),"\n",(0,a.jsx)(n.p,{children:"Global variables are the obvious example of static objects, but not the only one."}),"\n",(0,a.jsx)(n.p,{children:"Numeric and string-valued constant literals are also statically allocated."}),"\n",(0,a.jsx)(n.p,{children:"Finally, most compilers produce a variety of tables that are used by run-time support routines for debugging, dynamic type checking, garbage collection, exception handling, and other purposes; these are also statically allocated."}),"\n",(0,a.jsx)(n.p,{children:"Manifest constants can always be allocated statically, even if they are local to a recursive subroutine: multiple instances can share the same location."}),"\n",(0,a.jsx)(n.h4,{id:"stack-based-allocation",children:"Stack-Based Allocation"}),"\n",(0,a.jsx)(n.p,{children:"If a language permits recursion, static allocation of local variables is no longer an option."}),"\n",(0,a.jsx)(n.p,{children:"Fortunately, the natural nesting of subroutine calls makes it easy to allocate space for locals on a stack."}),"\n",(0,a.jsx)(n.p,{children:"Each instance of a subroutine at run time has its own frame (also called an activation record) on the stack, containing arguments and return values, local variables, temporaries, and bookkeeping information."}),"\n",(0,a.jsx)(n.h4,{id:"heap-based-allocation",children:"Heap-Based Allocation"}),"\n",(0,a.jsx)(n.p,{children:"A heap is a region of storage in which subblocks can be allocated and deallocated at arbitrary times."}),"\n",(0,a.jsx)(n.p,{children:"Heaps are required for the dynamically allocated pieces of linked data structures, and for objects such as fully general character strings, lists, and sets, whose size may change as a result of an assignment statement or other update operation."}),"\n",(0,a.jsx)(n.p,{children:"The principal concerns are speed and space, and as usual there are tradeoffs between them."}),"\n",(0,a.jsx)(n.p,{children:"\u5806\u5185\u5b58\u7ba1\u7406\u65b9\u6cd5\uff1a"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["With a ",(0,a.jsx)(n.strong,{children:"first fit"})," algorithm we select the first block on the list that is large enough to satisfy the request."]}),"\n",(0,a.jsxs)(n.li,{children:["With a ",(0,a.jsx)(n.strong,{children:"best fit"})," algorithm we search the entire list to find the smallest block that is large enough to satisfy the request."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"\u4e24\u8005\u7684\u5bf9\u6bd4\uff1a"}),"\n",(0,a.jsxs)(n.p,{children:["Intuitively, one would expect a best fit algorithm to do a better job of reserving large blocks for large requests. At the same time, it has ",(0,a.jsx)(n.strong,{children:"higher allocation cost"})," than a first fit algorithm, because it must always search the entire list, and it tends to result in a larger number of very small \u201cleft-over\u201d blocks."]}),"\n",(0,a.jsx)(n.h5,{id:"\u5185\u5b58\u7ba1\u7406\u5b58\u5728\u7684\u95ee\u9898",children:"\u5185\u5b58\u7ba1\u7406\u5b58\u5728\u7684\u95ee\u9898\uff1a"}),"\n",(0,a.jsx)(n.p,{children:"\u5185\u5b58\u5206\u914d\u6548\u7387\u548c\u5806\u6700\u5c0f\u5927\u5c0f\u6709\u5173\uff08\u591a\u6b21\u7533\u8bf7\uff09\uff1a"}),"\n",(0,a.jsxs)(n.p,{children:["In effect, the heap is divided into \u201cpools,\u201d one for each standard size. The division may be static or dynamic. Two common mechanisms for dynamic pool adjustment are known as the ",(0,a.jsx)(n.strong,{children:"buddy system"})," and the ",(0,a.jsx)(n.strong,{children:"Fibonacci heap"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"\u5185\u5b58\u788e\u7247\u95ee\u9898\uff1a"}),"\n",(0,a.jsx)(n.p,{children:"The problem with external fragmentation is that the ability of the heap to satisfy requests may degrade over time."}),"\n",(0,a.jsx)(n.h4,{id:"garbage-collection",children:"Garbage Collection"}),"\n",(0,a.jsx)(n.p,{children:"The run-time library for such a language must then provide a garbage collection mechanism to identify and reclaim unreachable objects."}),"\n",(0,a.jsx)(n.p,{children:"\u624b\u52a8 vs \u81ea\u52a8\uff1a"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The traditional arguments in favor of explicit deallocation are implementation simplicity and execution speed."}),"\n",(0,a.jsx)(n.li,{children:"manual deallocation errors are among the most common and costly bugs in real-world programs."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"scope-rules",children:"Scope Rules"}),"\n",(0,a.jsx)(n.p,{children:"The textual region of the program in which a binding is active is its scope. In most modern languages, the scope of a binding is determined statically, that is, at compile time."}),"\n",(0,a.jsx)(n.p,{children:"\u4f5c\u7528\u57df\u5206\u4e3a\uff1a"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"statically scoped: compile time"}),"\n",(0,a.jsx)(n.li,{children:"dynamically scoped: bindings depend on the flow of execution at run time"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["At any given point in a program\u2019s execution, the set of active bindings is called the current ",(0,a.jsx)(n.strong,{children:"referencing environment"}),". The set is principally determined by static or dynamic scope rules."]}),"\n",(0,a.jsx)(n.p,{children:"binding rules:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"deep binding: the choice is made when the reference is first created"}),"\n",(0,a.jsx)(n.li,{children:"shallow binding: the choice is made when the reference is finally used"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"static-scoping",children:"Static Scoping"}),"\n",(0,a.jsx)(n.p,{children:"In a language with static (lexical) scoping, the bindings between names and objects can be determined at compile time by examining the text of the program, without consideration of the flow of control at run time."}),"\n",(0,a.jsx)(n.h4,{id:"nested-subroutines",children:"Nested Subroutines"}),"\n",(0,a.jsx)(n.p,{children:"a name that is introduced in a declaration is known in the scope in which it is declared, and in each internally nested scope, unless it is hidden by another declaration of the same name in one or more nested scopes."}),"\n",(0,a.jsxs)(n.p,{children:["To find the object corresponding to a given use of a name, we look for a declaration with that name in the ",(0,a.jsx)(n.strong,{children:"current, innermost scope"}),". If there is one, it defines the active binding for the name. Otherwise, we look for a declaration in the ",(0,a.jsx)(n.strong,{children:"immediately surrounding scope"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"A name-to-object binding that is hidden by a nested declaration of the same name is said to have a hole in its scope."}),"\n",(0,a.jsx)(n.p,{children:"\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26\uff1a"}),"\n",(0,a.jsxs)(n.p,{children:["In others, the programmer can access the outer meaning of a name by applying a qualifier or ",(0,a.jsx)(n.strong,{children:"scope resolution operator"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"declaration-order",children:"Declaration Order"}),"\n",(0,a.jsx)(n.p,{children:"Put another way, can an expression E refer to any name declared in the current scope, or only to names that are declared before E in the scope?"}),"\n",(0,a.jsx)(n.p,{children:"Several early languages, required that all declarations appear at the beginning of their scope."}),"\n",(0,a.jsxs)(n.p,{children:["C++ and Java further relax the rules by dispensing with the define-before-use requirement in many cases. In both languages, members of a class (including those that are not defined until later in the program text) are ",(0,a.jsx)(n.strong,{children:"visible inside all of the class\u2019s methods"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"declarations-and-definitions",children:"Declarations and Definitions"}),"\n",(0,a.jsx)(n.p,{children:"\u5982\u4f55\u5904\u7406\u4e24\u4e2a\u7c7b\u4e92\u76f8\u5305\u542b\u5f7c\u6b64\uff1f"}),"\n",(0,a.jsx)(n.p,{children:"Recursive types and subroutines introduce a problem for languages that require names to be declared before they can be used: how can two declarations each appear before the other?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A declaration introduces a name and indicates its scope, but may omit certain implementation details."}),"\n",(0,a.jsx)(n.li,{children:"A definition describes the object in sufficient detail for the compiler to determine its implementation."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"modules",children:"Modules"}),"\n",(0,a.jsx)(n.p,{children:"\u6a21\u5757\u5316\u548c\u4fe1\u606f\u9690\u85cf\uff0c\u51cf\u5c11\u8ba4\u8bc6\u8d1f\u8377\uff1a"}),"\n",(0,a.jsxs)(n.p,{children:["This modularization of effort depends critically on the notion of ",(0,a.jsx)(n.strong,{children:"information hiding"}),", which makes objects and algorithms invisible, whenever possible, to portions of the system that do not need them."]}),"\n",(0,a.jsx)(n.h4,{id:"module-types-and-classes",children:"Module Types and Classes"}),"\n",(0,a.jsx)(n.p,{children:"An alternative solution to the multiple instance problem appeared in Euclid, which treated each module as a type. Given a module type, the programmer could declare an arbitrary number of similar module objects."}),"\n",(0,a.jsx)(n.h4,{id:"dynamic-scoping",children:"Dynamic Scoping"}),"\n",(0,a.jsxs)(n.p,{children:["In a language with dynamic scoping, the bindings between names and objects depend on the flow of control at ",(0,a.jsx)(n.strong,{children:"run time"}),", and in particular on the order in which subroutines are called."]}),"\n",(0,a.jsx)(n.p,{children:"\u4e3a\u4ec0\u4e48\u52a8\u6001\u4f5c\u7528\u57df\u5230\u8fd0\u884c\u65f6\u624d\u80fd\u786e\u5b9a\uff1f"}),"\n",(0,a.jsx)(n.p,{children:"Because the flow of control cannot in general be predicted in advance, the bindings between names and objects in a language with dynamic scoping cannot in general be determined by a compiler."}),"\n",(0,a.jsx)(n.h3,{id:"implementing-scope",children:"Implementing Scope"}),"\n",(0,a.jsxs)(n.p,{children:["To keep track of the names in a statically scoped program, a compiler relies on a data abstraction called a ",(0,a.jsx)(n.strong,{children:"symbol table"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In a language with dynamic scoping, an interpreter (or the output of a compiler) must perform operations analogous to symbol table ",(0,a.jsx)(n.strong,{children:"insert and lookup at run time"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"the-meaning-of-names-within-a-scope",children:"The Meaning of Names within a Scope"}),"\n",(0,a.jsx)(n.p,{children:"A name that can refer to more than one object at a given point in the program is said to be overloaded. Overloading is in turn related to the more general subject of polymorphism."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"aliases"}),": Two or more names that refer to the same object at the same point in the program are said to be aliases."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"overloaded"}),": A name that can refer to more than one object at a given point in the program is said to be overloaded"]}),"\n",(0,a.jsx)(n.li,{children:"Redefining Built-in Operators"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"the-binding-of-referencing-environments",children:"The Binding of Referencing Environments"}),"\n",(0,a.jsxs)(n.p,{children:["When should scope rules be applied to such a subroutine: ",(0,a.jsx)(n.strong,{children:"when"})," the reference is first created, or ",(0,a.jsx)(n.strong,{children:"when"})," the routine is finally called?"]}),"\n",(0,a.jsx)(n.p,{children:"\u52a8\u6001\u4f5c\u7528\u57df\u5e38\u4f7f\u7528 shallow binding\uff1a"}),"\n",(0,a.jsxs)(n.p,{children:["This late binding of the referencing environment of a subroutine that has been passed as a parameter is known as ",(0,a.jsx)(n.strong,{children:"shallow binding"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"\u9759\u6001\u4f5c\u7528\u57df\u5e38\u4f7f\u7528 deep binding\uff1a"}),"\n",(0,a.jsx)(n.p,{children:"It therefore makes sense to bind the environment at the time the routine is first passed as a parameter, and then restore that environment when the routine is finally called."}),"\n",(0,a.jsxs)(n.p,{children:["This early binding of the referencing environment is known as ",(0,a.jsx)(n.strong,{children:"deep binding"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"subroutine-closures",children:"Subroutine Closures"}),"\n",(0,a.jsxs)(n.p,{children:["Deep binding is implemented by creating an explicit representation of a referencing environment (generally the one in which the subroutine would execute if called at the present time) and bundling it together with a reference to the subroutine. The bundle as a whole is referred to as a ",(0,a.jsx)(n.strong,{children:"closure"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"object-closures",children:"Object Closures"}),"\n",(0,a.jsxs)(n.p,{children:["An object that plays the role of a function and its referencing environment may variously be called an ",(0,a.jsx)(n.em,{children:"object closure"}),", a function object, or a functor."]}),"\n",(0,a.jsx)(n.h3,{id:"macro-expansion",children:"Macro Expansion"}),"\n",(0,a.jsxs)(n.p,{children:["Prior to the development of high-level programming languages, assembly language programmers could find themselves writing ",(0,a.jsx)(n.strong,{children:"highly repetitive code"}),". To ease the burden, many assemblers provided sophisticated macro expansion facilities."]}),"\n",(0,a.jsxs)(n.p,{children:["So-called ",(0,a.jsx)(n.strong,{children:"hygienic macros(\u536b\u751f\u5b8f)"})," implicitly encapsulate their arguments, avoiding unexpected interactions with associativity and precedence."]}),"\n",(0,a.jsx)(n.h3,{id:"summary-and-concluding-remarks",children:"Summary and Concluding Remarks"}),"\n",(0,a.jsx)(n.p,{children:"\u8fd9\u4e00\u7ae0\u8ba8\u8bba\u4e86\u540d\u79f0\u7684\u4e3b\u9898\uff0c\u4ee5\u53ca\u540d\u79f0\u4e0e\u5bf9\u8c61\u7684\u7ed1\u5b9a\uff08\u5728\u5e7f\u4e49\u4e0a\uff09\u3002\u6211\u4eec\u5f00\u59cb\u4ece\u7ed1\u5b9a\u65f6\u95f4\u7684\u4e00\u822c\u8ba8\u8bba\u2014\u2014\u540d\u79f0\u4e0e\u7279\u5b9a\u5bf9\u8c61\u5173\u8054\u7684\u65f6\u95f4\uff0c\u6216\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u4efb\u4f55\u5f00\u653e\u95ee\u9898\u5728\u8bed\u8a00\u6216\u7a0b\u5e8f\u8bbe\u8ba1\u6216\u5b9e\u73b0\u4e2d\u4e0e\u7b54\u6848\u5173\u8054\u7684\u65f6\u95f4\u3002\u6211\u4eec\u5b9a\u4e49\u4e86\u5bf9\u8c61\u548c\u540d\u79f0\u5230\u5bf9\u8c61\u7ed1\u5b9a\u7684\u751f\u547d\u5468\u671f\u7684\u6982\u5ff5\uff0c\u5e76\u6307\u51fa\u5b83\u4eec\u4e0d\u5fc5\u76f8\u540c\u3002\u7136\u540e\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e09\u79cd\u4e3b\u8981\u7684\u5b58\u50a8\u5206\u914d\u673a\u5236\u2014\u2014\u9759\u6001\u3001\u6808\u3001\u548c\u5806\u2014\u2014\u7528\u4e8e\u7ba1\u7406\u5bf9\u8c61\u7684\u7a7a\u95f4\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u57283.3\u8282\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u540d\u79f0\u4e0e\u5bf9\u8c61\u7684\u7ed1\u5b9a\u662f\u5982\u4f55\u53d7\u4f5c\u7528\u57df\u89c4\u5219\u7684\u7ea6\u675f\u3002\u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u4f5c\u7528\u57df\u89c4\u5219\u662f\u52a8\u6001\u7684\uff1a\u4e00\u4e2a\u540d\u79f0\u7684\u542b\u4e49\u662f\u5728\u6700\u8fd1\u8fdb\u5165\u7684\u5305\u542b\u58f0\u660e\u4e14\u5c1a\u672a\u9000\u51fa\u7684\u4f5c\u7528\u57df\u4e2d\u627e\u5230\u7684\u3002\u7136\u800c\uff0c\u5728\u5927\u591a\u6570\u73b0\u4ee3\u8bed\u8a00\u4e2d\uff0c\u4f5c\u7528\u57df\u89c4\u5219\u662f\u9759\u6001\u7684\uff0c\u6216\u8005\u8bf4\u662f\u8bcd\u6cd5\u7684\uff1a\u4e00\u4e2a\u540d\u79f0\u7684\u542b\u4e49\u662f\u5728\u6700\u8fd1\u7684\u5305\u542b\u58f0\u660e\u7684\u8bcd\u6cd5\u73af\u7ed5\u4f5c\u7528\u57df\u4e2d\u627e\u5230\u7684\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u8bcd\u6cd5\u4f5c\u7528\u57df\u89c4\u5219\u5728\u4e0d\u540c\u8bed\u8a00\u4e4b\u95f4\u4ee5\u91cd\u8981\u4f46\u6709\u65f6\u662f\u5fae\u5999\u7684\u65b9\u5f0f\u53d8\u5316\u3002\u6211\u4eec\u8003\u8651\u4e86\u54ea\u4e9b\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u662f\u5141\u8bb8\u5d4c\u5957\u7684\uff0c\u4f5c\u7528\u57df\u662f\u5f00\u653e\u7684\u8fd8\u662f\u5c01\u95ed\u7684\uff0c\u4e00\u4e2a\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u5426\u5305\u62ec\u5176\u58f0\u660e\u7684\u6574\u4e2a\u5757\uff0c\u4ee5\u53ca\u662f\u5426\u5fc5\u987b\u5728\u4f7f\u7528\u540d\u79f0\u4e4b\u524d\u58f0\u660e\u5b83\u3002\u6211\u4eec\u57283.4\u8282\u63a2\u7d22\u4e86\u4f5c\u7528\u57df\u89c4\u5219\u7684\u5b9e\u73b0\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u57283.5\u8282\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e86\u7ed1\u5b9a\u4e4b\u95f4\u5173\u7cfb\u7684\u51e0\u79cd\u65b9\u5f0f\u3002\u522b\u540d\u4ea7\u751f\u4e8e\u5f53\u5728\u7ed9\u5b9a\u4f5c\u7528\u57df\u4e2d\u4e24\u4e2a\u6216\u66f4\u591a\u540d\u79f0\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u5bf9\u8c61\u65f6\u3002\u91cd\u8f7d\u4ea7\u751f\u4e8e\u4e00\u4e2a\u540d\u79f0\u7ed1\u5b9a\u5230\u591a\u4e2a\u5bf9\u8c61\u65f6\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5c3d\u7ba1\u6709\u65f6\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u8f6c\u6362\u6216\u591a\u6001\u6027\u5b9e\u73b0\u7c7b\u4f3c\u91cd\u8f7d\u7684\u884c\u4e3a\uff0c\u4f46\u5e95\u5c42\u673a\u5236\u5b9e\u9645\u4e0a\u662f\u975e\u5e38\u4e0d\u540c\u7684\u3002\u57283.6\u8282\u4e2d\uff0c\u6211\u4eec\u8003\u8651\u4e86\u4f55\u65f6\u5c06\u5f15\u7528\u73af\u5883\u7ed1\u5b9a\u5230\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3001\u4ece\u51fd\u6570\u8fd4\u56de\u6216\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u5b50\u7a0b\u5e8f\u7684\u95ee\u9898\u3002\u6211\u4eec\u7684\u8ba8\u8bba\u6d89\u53ca\u4e86\u95ed\u5305\u548clambda\u8868\u8fbe\u5f0f\u7684\u6982\u5ff5\uff0c\u8fd9\u4e24\u8005\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u90fd\u4f1a\u53cd\u590d\u51fa\u73b0\u3002\u57283.7\u8282\u548c3.8\u8282\u4e2d\uff0c\u6211\u4eec\u8003\u8651\u4e86\u5b8f\u548c\u5206\u79bb\u7f16\u8bd1\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u8bcd\u6cd5\u4f5c\u7528\u57df\u7684\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u65b9\u9762\u8bf4\u660e\u4e86\u5bf9\u6570\u636e\u62bd\u8c61\u7684\u8bed\u8a00\u652f\u6301\u7684\u53d1\u5c55\uff0c\u8fd9\u662f\u6211\u4eec\u5c06\u5728\u7b2c10\u7ae0\u56de\u987e\u7684\u4e3b\u9898\u3002\u6211\u4eec\u9996\u5148\u63cf\u8ff0\u4e86\u50cfFortran\u3001Algol 60\u548cC\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\u7684own\u6216\u9759\u6001\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5141\u8bb8\u5b50\u7a0b\u5e8f\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u5728\u4e00\u6b21\u8c03\u7528\u5230\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\u4fdd\u6301\u5176\u503c\u3002\u7136\u540e\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u7b80\u5355\u6a21\u5757\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u79cd\u4f7f\u957f\u671f\u5b58\u5728\u7684\u5bf9\u8c61\u5bf9\u4e00\u7ec4\u5b50\u7a0b\u5e8f\u5c40\u90e8\u5316\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u5b83\u4eec\u5bf9\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u6765\u8bf4\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u901a\u8fc7\u9009\u62e9\u6027\u5730\u5bfc\u51fa\u540d\u79f0\uff0c\u4e00\u4e2a\u6a21\u5757\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u201c\u7ba1\u7406\u8005\u201d\u3002\u5728\u66f4\u9ad8\u4e00\u5c42\u7684\u590d\u6742\u6027\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6709\u4e9b\u8bed\u8a00\u5c06\u6a21\u5757\u89c6\u4e3a\u7c7b\u578b\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u521b\u5efa\u7531\u6a21\u5757\u5b9a\u4e49\u7684\u62bd\u8c61\u7684\u4efb\u610f\u6570\u91cf\u7684\u5b9e\u4f8b\u3002\u6700\u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u7ee7\u627f\u673a\u5236\uff0c\u8fd9\u4e2a\u673a\u5236\u5141\u8bb8\u5b9a\u4e49\u65b0\u7684\u62bd\u8c61\uff08\u7c7b\uff09\u4f5c\u4e3a\u73b0\u6709\u7c7b\u7684\u6269\u5c55\u6216\u7cbe\u5316\uff0c\u4ece\u800c\u6269\u5c55\u4e86\u6a21\u5757\u4f5c\u4e3a\u7c7b\u578b\u7684\u65b9\u6cd5\uff08\u4ee5\u53ca\u8bcd\u6cd5\u4f5c\u7528\u57df\u7684\u6982\u5ff5\uff09\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u5728\u672c\u7ae0\u8003\u8651\u7684\u4e3b\u9898\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u7279\u6027\u7684\u4f8b\u5b50\uff08\u9012\u5f52\u3001\u9759\u6001\u4f5c\u7528\u57df\u3001\u524d\u5411\u5f15\u7528\u3001\u4e00\u7ea7\u5b50\u7a0b\u5e8f\u3001\u65e0\u9650\u8303\u56f4\uff09\uff0c\u8fd9\u4e9b\u7279\u6027\u56e0\u4e3a\u62c5\u5fc3\u5b9e\u73b0\u7684\u590d\u6742\u6027\u6216\u8fd0\u884c\u65f6\u6210\u672c\u800c\u88ab\u67d0\u4e9b\u8bed\u8a00\u7701\u7565\u3002\u6211\u4eec\u8fd8\u770b\u5230\u4e86\u4e00\u4e2a\u7279\u6027\u7684\u4f8b\u5b50\uff08\u6a21\u5757\u89c4\u8303\u7684\u79c1\u6709\u90e8\u5206\uff09\uff0c\u5b83\u662f\u4e3a\u4e86\u65b9\u4fbf\u8bed\u8a00\u7684\u5b9e\u73b0\u800c\u7279\u522b\u5f15\u5165\u7684\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\uff08C\u8bed\u8a00\u4e2d\u7684\u72ec\u7acb\u7f16\u8bd1\uff09\u5176\u8bbe\u8ba1\u663e\u7136\u662f\u4e3a\u4e86\u53cd\u6620\u7279\u5b9a\u7684\u5b9e\u73b0\u3002\u5728\u8bed\u8a00\u8bbe\u8ba1\u7684\u51e0\u4e2a\u989d\u5916\u65b9\u9762\uff08\u665a\u7ed1\u5b9a\u4e0e\u65e9\u7ed1\u5b9a\u3001\u9759\u6001\u4e0e\u52a8\u6001\u4f5c\u7528\u57df\u3001\u5bf9\u5f3a\u5236\u8f6c\u6362\u548c\u8f6c\u6362\u7684\u652f\u6301\u3001\u5bf9\u6307\u9488\u548c\u5176\u4ed6\u522b\u540d\u7684\u5bb9\u5fcd\uff09\uff0c\u6211\u4eec\u770b\u5230\u5b9e\u73b0\u95ee\u9898\u8d77\u7740\u91cd\u8981\u4f5c\u7528\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u5728\u7c7b\u4f3c\u7684\u8109\u7edc\u4e2d\uff0c\u770b\u4f3c\u7b80\u5355\u7684\u8bed\u8a00\u89c4\u5219\u53ef\u80fd\u4f1a\u6709\u51fa\u4eba\u610f\u6599\u7684\u542b\u4e49\u3002\u4f8b\u5982\uff0c\u57283.3.3\u8282\u4e2d\uff0c\u6211\u4eec\u8003\u8651\u4e86\u6574\u4e2a\u5757\u4f5c\u7528\u57df\u4e0e\u540d\u5b57\u5fc5\u987b\u5728\u4f7f\u7528\u524d\u58f0\u660e\u7684\u8981\u6c42\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u5c31\u50cfFortran\u7684do\u5faa\u73af\u8bed\u6cd5\u548c\u7a7a\u767d\u89c4\u5219\uff082.2.2\u8282\uff09\u6216Pascal\u7684if...then...else\u8bed\u6cd5\uff082.3.2\u8282\uff09\uff0c\u5982\u679c\u9009\u62e9\u4e0d\u5f53\uff0c\u4f5c\u7528\u57df\u89c4\u5219\u4f1a\u4f7f\u7a0b\u5e8f\u5206\u6790\u53d8\u5f97\u56f0\u96be\uff0c\u8fd9\u4e0d\u4ec5\u5bf9\u7f16\u8bd1\u5668\u5982\u6b64\uff0c\u5bf9\u4eba\u7c7b\u540c\u6837\u5982\u6b64\u3002\u5728\u672a\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u51e0\u4e2a\u65e2\u4ee4\u4eba\u56f0\u60d1\u53c8\u96be\u4ee5\u7f16\u8bd1\u7684\u7279\u6027\u793a\u4f8b\u3002\u5f53\u7136\uff0c\u8bed\u4e49\u7684\u5b9e\u7528\u6027\u548c\u5b9e\u73b0\u7684\u5bb9\u6613\u7a0b\u5ea6\u5e76\u4e0d\u603b\u662f\u4e00\u81f4\u7684\u3002\u8bb8\u591a\u5bb9\u6613\u7f16\u8bd1\u7684\u7279\u6027\uff08\u4f8b\u5982\uff0cgoto\u8bed\u53e5\uff09\u5176\u4ef7\u503c\u81f3\u5c11\u662f\u503c\u5f97\u6000\u7591\u7684\u3002\u6211\u4eec\u8fd8\u5c06\u770b\u5230\u51e0\u4e2a\u975e\u5e38\u6709\u7528\u4e14\uff08\u6982\u5ff5\u4e0a\uff09\u7b80\u5355\u7684\u7279\u6027\uff0c\u6bd4\u5982\u5783\u573e\u6536\u96c6\uff088.5.3\u8282\uff09\u548c\u7edf\u4e00\uff087.2.4\u8282\uff0cC 7.3.2\u8282\u548c12.2.1\u8282\uff09\uff0c\u5b83\u4eec\u7684\u5b9e\u73b0\u5374\u76f8\u5f53\u590d\u6742\u3002"})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>r});var a=i(7294);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);