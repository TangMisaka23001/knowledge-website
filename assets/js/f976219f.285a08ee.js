"use strict";(self.webpackChunkmy_knowledge_repo=self.webpackChunkmy_knowledge_repo||[]).push([[8768],{154:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=i(5893),a=i(1151);const s={title:"\u7b2c\u516b\u7ae0",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},r=void 0,l={id:"technical/programming-language-pragmatics/08",title:"\u7b2c\u516b\u7ae0",description:"Subroutines and Control Abstraction",source:"@site/docs/technical/programming-language-pragmatics/08.md",sourceDirName:"technical/programming-language-pragmatics",slug:"/technical/programming-language-pragmatics/08",permalink:"/docs/technical/programming-language-pragmatics/08",draft:!1,unlisted:!1,tags:[{inline:!0,label:"\u7f16\u8bd1\u5668",permalink:"/docs/tags/\u7f16\u8bd1\u5668"},{inline:!0,label:"Programming Language Pragmatics",permalink:"/docs/tags/programming-language-pragmatics"}],version:"current",frontMatter:{title:"\u7b2c\u516b\u7ae0",tags:["\u7f16\u8bd1\u5668","Programming Language Pragmatics"]},sidebar:"technical",previous:{title:"\u7b2c\u4e03\u7ae0",permalink:"/docs/technical/programming-language-pragmatics/07"}},o={},c=[{value:"Subroutines and Control Abstraction",id:"subroutines-and-control-abstraction",level:2},{value:"Review of Stack Layout\uff08\u6808\u5185\u5b58\u5e03\u5c40\uff09",id:"review-of-stack-layout\u6808\u5185\u5b58\u5e03\u5c40",level:3},{value:"Calling Sequences",id:"calling-sequences",level:3},{value:"Saving and Restoring Registers",id:"saving-and-restoring-registers",level:5},{value:"Maintaining the Static Chain",id:"maintaining-the-static-chain",level:5},{value:"A Typical Calling Sequence",id:"a-typical-calling-sequence",level:5},{value:"Displays",id:"displays",level:4},{value:"Case Studies: C on the MIPS; Pascal on the x86",id:"case-studies-c-on-the-mips-pascal-on-the-x86",level:4},{value:"Register Windows",id:"register-windows",level:4},{value:"In-Line Expansion",id:"in-line-expansion",level:4},{value:"Parameter Passing",id:"parameter-passing",level:3},{value:"Parameter Modes",id:"parameter-modes",level:4},{value:"Call-by-sharing",id:"call-by-sharing",level:5},{value:"The Purpose of Call-by-Reference",id:"the-purpose-of-call-by-reference",level:5},{value:"Call-by-Name",id:"call-by-name",level:4},{value:"Special-Purpose Parameters",id:"special-purpose-parameters",level:4},{value:"Generic Subroutines and Modules",id:"generic-subroutines-and-modules",level:3},{value:"Implementation Options",id:"implementation-options",level:4},{value:"Generic Parameter Constraints\uff08\u6cdb\u578b\u7ea6\u675f\uff09",id:"generic-parameter-constraints\u6cdb\u578b\u7ea6\u675f",level:4},{value:"Exception Handling",id:"exception-handling",level:3},{value:"Defining Exceptions",id:"defining-exceptions",level:4},{value:"Exception Propagation\uff08\u5f02\u5e38\u4f20\u64ad\uff09",id:"exception-propagation\u5f02\u5e38\u4f20\u64ad",level:4},{value:"Implementation of Exceptions",id:"implementation-of-exceptions",level:4},{value:"Coroutines",id:"coroutines",level:3},{value:"Events",id:"events",level:3},{value:"Summary and Concluding Remarks",id:"summary-and-concluding-remarks",level:3}];function h(e){const n={blockquote:"blockquote",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"subroutines-and-control-abstraction",children:"Subroutines and Control Abstraction"}),"\n",(0,t.jsx)(n.p,{children:"Subroutines are the principal mechanism for control abstraction in most programming languages."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A subroutine that returns a value is usually called a ",(0,t.jsx)(n.em,{children:"function"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["A subroutine that does not return a value is usually called a ",(0,t.jsx)(n.em,{children:"procedure"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"review-of-stack-layout\u6808\u5185\u5b58\u5e03\u5c40",children:"Review of Stack Layout\uff08\u6808\u5185\u5b58\u5e03\u5c40\uff09"}),"\n",(0,t.jsxs)(n.p,{children:["the ",(0,t.jsx)(n.strong,{children:"stack pointer"})," register contains the address of either the last used location at the top of the stack, or the first unused location"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"frame pointer"})," register contains an address within the frame."]}),"\n",(0,t.jsx)(n.h3,{id:"calling-sequences",children:"Calling Sequences"}),"\n",(0,t.jsx)(n.p,{children:"Maintenance of the subroutine call stack is the responsibility of the calling sequence"}),"\n",(0,t.jsxs)(n.p,{children:["Tasks that must be accomplished on the way ",(0,t.jsx)(n.strong,{children:"into"})," a subroutine include\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"passing parameters"}),"\n",(0,t.jsx)(n.li,{children:"saving the return address"}),"\n",(0,t.jsx)(n.li,{children:"changing the program counter"}),"\n",(0,t.jsx)(n.li,{children:"changing the stack pointer to allocate space"}),"\n",(0,t.jsx)(n.li,{children:"saving registers (including the frame pointer) that contain important values and that may be overwritten by the callee"}),"\n",(0,t.jsx)(n.li,{children:"changing the frame pointer to refer to the new frame"}),"\n",(0,t.jsx)(n.li,{children:"executing initialization code for any objects in the new frame that require it"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Tasks that must be accomplished on the way ",(0,t.jsx)(n.strong,{children:"out"})," include\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"passing return parameters or function values"}),"\n",(0,t.jsx)(n.li,{children:"executing finalization code for any local objects that require it"}),"\n",(0,t.jsx)(n.li,{children:"deallocating the stack frame (restoring the stack pointer)"}),"\n",(0,t.jsx)(n.li,{children:"restoring other saved registers (including the frame pointer)"}),"\n",(0,t.jsx)(n.li,{children:"restoring the program counter"}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"saving-and-restoring-registers",children:"Saving and Restoring Registers"}),"\n",(0,t.jsx)(n.p,{children:"\u51fd\u6570\u8c03\u7528\u6700\u68d8\u624b\u7684\u90e8\u5206\u5c31\u662f\u4fdd\u5b58\u548c\u6062\u590d\u5bc4\u5b58\u5668\u3002"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Perhaps the trickiest division-of-labor issue pertains to saving registers."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.em,{children:"simpler solution"})," is for the caller to save all registers that are in use, or for the callee to save all registers that it will overwrite."]}),"\n",(0,t.jsx)(n.p,{children:"\u8c03\u7528\u7ea6\u5b9a\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"strike something of a compromise: registers not reserved for special purposes are divided into two sets of approximately equal size. One set is the caller\u2019s responsibility, the other is the callee\u2019s responsibility. A callee can assume that there is nothing of value in any of the registers in the caller-saves set; a caller can assume that no callee will destroy the contents of any registers in the callee-saves set."}),"\n",(0,t.jsx)(n.h5,{id:"maintaining-the-static-chain",children:"Maintaining the Static Chain"}),"\n",(0,t.jsx)(n.p,{children:"In languages with nested subroutines,at least part of the work required to maintain the static chain must be performed by the caller,rather than the callee,because this work depends on the lexical nesting depth of the caller."}),"\n",(0,t.jsx)(n.h5,{id:"a-typical-calling-sequence",children:"A Typical Calling Sequence"}),"\n",(0,t.jsx)(n.p,{children:"The caller\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"saves any caller-saves registers whose values will be needed after the call"}),"\n",(0,t.jsx)(n.li,{children:"computes the values of arguments and moves them into the stack or registers"}),"\n",(0,t.jsx)(n.li,{children:"computes the static link (if this is a language with nested subroutines), and passes it as an extra, hidden argument"}),"\n",(0,t.jsx)(n.li,{children:"uses a special subroutine call instruction to jump to the subroutine, simultaneously passing the return address on the stack or in a register"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"the callee\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"allocates a frame by subtracting an appropriate constant from the sp"}),"\n",(0,t.jsx)(n.li,{children:"saves the old frame pointer into the stack, and assigns it an appropriate new value"}),"\n",(0,t.jsx)(n.li,{children:"saves any callee-saves registers that may be overwritten by the current routine (including the static link and return address, if they were passed in registers)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"After the subroutine has completed, the epilogue\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"moves the return value (if any) into a register or a reserved location in the stack"}),"\n",(0,t.jsx)(n.li,{children:"restores callee-saves registers if needed"}),"\n",(0,t.jsx)(n.li,{children:"restores the fp and the sp"}),"\n",(0,t.jsx)(n.li,{children:"jumps back to the return address"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Finally, the caller\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"moves the return value to wherever it is needed"}),"\n",(0,t.jsx)(n.li,{children:"restores caller-saves registers if needed"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"displays",children:"Displays"}),"\n",(0,t.jsx)(n.p,{children:"One disadvantage of static chains is that access to an object in a scope k levels out requires that the static chain be dereferenced k times."}),"\n",(0,t.jsx)(n.p,{children:"This number can be reduced to a constant by use of a display."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u4e3a\u4e86\u4f18\u5316\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u53eb\u505a display \u7684\u6570\u636e\u7ed3\u6784\u3002display \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e0d\u540c\u5d4c\u5957\u5c42\u7ea7\u7684\u6d3b\u52a8\u8bb0\u5f55\uff08activation record\uff09\u3002\u5f53\u8fdb\u5165\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u66f4\u65b0 display \u6765\u53cd\u6620\u5f53\u524d\u7684\u8c03\u7528\u73af\u5883\u3002\u5177\u4f53\u6765\u8bf4\uff0cdisplay[i] \u4f1a\u6307\u5411\u7b2c i \u5c42\u5d4c\u5957\u7684\u6700\u8fd1\u6d3b\u52a8\u8bb0\u5f55\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u4f7f\u7528 display \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6570\u7ec4\u7d22\u5f15\u5feb\u901f\u5b9a\u4f4d\u5230\u4efb\u4f55\u5c42\u7ea7\u7684\u6d3b\u52a8\u8bb0\u5f55\uff0c\u4ece\u800c\u8ba9\u8bbf\u95ee\u5916\u5c42\u53d8\u91cf\u7684\u64cd\u4f5c\u66f4\u52a0\u9ad8\u6548\u3002\u8fd9\u79cd\u65b9\u6cd5\u51cf\u5c11\u4e86\u901a\u8fc7\u591a\u4e2a\u9759\u6001\u94fe\u6307\u9488\u8fdb\u884c\u8df3\u8f6c\u7684\u9700\u8981\uff0c\u56e0\u6b64\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u5c24\u5176\u662f\u5728\u51fd\u6570\u5d4c\u5957\u5c42\u6b21\u8f83\u6df1\u7684\u60c5\u51b5\u4e0b\u3002"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"case-studies-c-on-the-mips-pascal-on-the-x86",children:"Case Studies: C on the MIPS; Pascal on the x86"}),"\n",(0,t.jsxs)(n.p,{children:["Calling sequences ",(0,t.jsx)(n.strong,{children:"differ significantly"})," from machine to machine and even compiler tocompiler"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Compilers for CISC machines tend to pass arguments on the stack; compilers for RISC machines tend to pass arguments in registers."}),"\n",(0,t.jsx)(n.li,{children:"Compilers for CISC machines usually dedicate a register to the frame pointer; compilers for RISC machines often do not."}),"\n",(0,t.jsx)(n.li,{children:"Compilers for CISC machines often rely on special-purpose instructions to implement parts of the calling sequence; available instructions on a RISC machine are typically much simpler."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"register-windows",children:"Register Windows"}),"\n",(0,t.jsxs)(n.p,{children:["As an alternative to saving and restoring registers on subroutine calls and returns, the original Berkeley RISC machines introduced a ",(0,t.jsx)(n.em,{children:"hardware mechanism"})," known as ",(0,t.jsx)(n.strong,{children:"register windows"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The basic idea is to ",(0,t.jsx)(n.em,{children:"map"})," the ISA\u2019s limited set of register names onto some subset (window) of a much larger collection of physical registers, and to change the mapping when making subroutine calls."]}),"\n",(0,t.jsx)(n.h4,{id:"in-line-expansion",children:"In-Line Expansion"}),"\n",(0,t.jsxs)(n.p,{children:["many language implementations allow certain subroutines to be ",(0,t.jsx)(n.em,{children:"expanded in-line"})," at the point of call\uff1a"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"A copy of the \u201ccalled\u201d routine becomes a part of the \u201ccaller\u201d; no actual subroutine calloccurs."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In-line expansion avoids a variety of overheads,including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"space allocation,"}),"\n",(0,t.jsx)(n.li,{children:"branch delays from the call and return,"}),"\n",(0,t.jsx)(n.li,{children:"maintaining the static chain or display,"}),"\n",(0,t.jsx)(n.li,{children:"and (often) saving and restoring registers."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["It also allows the compiler to perform ",(0,t.jsx)(n.em,{children:"code improvements"})," such as:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"global register allocation"}),"\n",(0,t.jsx)(n.li,{children:"instruction scheduling"}),"\n",(0,t.jsx)(n.li,{children:"common subexpression elimination across the boundaries between subroutines"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"parameter-passing",children:"Parameter Passing"}),"\n",(0,t.jsx)(n.p,{children:"Most subroutines are parameterized: they take arguments that control certain aspects of their behavior, or specify the data on which they are to operate."}),"\n",(0,t.jsxs)(n.p,{children:["Parameter names that appear in the declaration of a subroutine are known as ",(0,t.jsx)(n.strong,{children:"formal parameters"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Variables and expressions that are passed to a subroutine in a particular call are known as ",(0,t.jsx)(n.strong,{children:"actual parameters"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"parameter-modes",children:"Parameter Modes"}),"\n",(0,t.jsx)(n.p,{children:"The two most common parameter-passing modes, called\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"call-by-value"}),"\n",(0,t.jsx)(n.li,{children:"call-by-reference"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"call-by-value\u53ea\u8981\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u628a\u53c2\u6570\u7684\u503c\u5199\u56de\u5230\u8c03\u7528\u65b9\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u548ccall-by-reference\u7c7b\u4f3c\u7684\u6548\u679c"}),"\n",(0,t.jsx)(n.h5,{id:"call-by-sharing",children:"Call-by-sharing"}),"\n",(0,t.jsx)(n.p,{children:"\u4e0d\u662f\u503c\u4f20\u9012\u3002\u56e0\u4e3a\uff1a"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"if we modify the object to which the formal parameter refers, the program will be able to see those changes through the actual parameter after the subroutine returns"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u4e5f\u4e0d\u662f\u5f15\u7528\u4f20\u9012\uff0c\u56e0\u4e3a\uff1a"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"although the called routine can change the value of the object to which the actual parameter refers, it cannot change the identity of that object."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Call-by-sharing is thus commonly implemented the same as call-by-value for objects of immutable type."}),"\n",(0,t.jsx)(n.h5,{id:"the-purpose-of-call-by-reference",children:"The Purpose of Call-by-Reference"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u9700\u8981\u4fee\u6539\u53c2\u6570"}),"\n",(0,t.jsx)(n.li,{children:"\u4f20\u9012\u5730\u5740\u6bd4\u590d\u5236\u53c2\u6570\u8282\u7ea6\u65f6\u95f4"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"call-by-name",children:"Call-by-Name"}),"\n",(0,t.jsx)(n.p,{children:"Explicit subroutine parameters are not the only language feature that requires a closure to be passed as a parameter."}),"\n",(0,t.jsxs)(n.p,{children:["In general, a language implementation must pass a closure whenever the eventual use of the parameter requires the ",(0,t.jsx)(n.strong,{children:"restoration of a previous referencing environment"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"special-purpose-parameters",children:"Special-Purpose Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Conformant Arrays"}),"\n",(0,t.jsx)(n.li,{children:"Default (Optional) Parameters"}),"\n",(0,t.jsx)(n.li,{children:"Named Parameters: A(name='xxx', age=24)"}),"\n",(0,t.jsx)(n.li,{children:"Variable Numbers of Arguments: fun(string...)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"generic-subroutines-and-modules",children:"Generic Subroutines and Modules"}),"\n",(0,t.jsx)(n.p,{children:"\u9700\u8981\u6cdb\u578b\u7684\u539f\u56e0\uff1a"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["In a language like Pascal or Fortran, this static declaration of item type means that the programmer must create separate ",(0,t.jsx)(n.strong,{children:"copies"})," of enqueue and dequeue ",(0,t.jsx)(n.strong,{children:"for every type of item"}),", even though the entire text of these copies (other than the type names in the procedure headers) is the same."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"implementation-options",children:"Implementation Options"}),"\n",(0,t.jsx)(n.p,{children:"Generics can be implemented several ways."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the compiler creates a ",(0,t.jsx)(n.strong,{children:"separate copy"})," of the code for every instance"]}),"\n",(0,t.jsxs)(n.li,{children:["guarantees that all instances of a given generic will ",(0,t.jsx)(n.strong,{children:"share the same code"})," at run time."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"generic-parameter-constraints\u6cdb\u578b\u7ea6\u675f",children:"Generic Parameter Constraints\uff08\u6cdb\u578b\u7ea6\u675f\uff09"}),"\n",(0,t.jsx)(n.p,{children:"\u907f\u514d\u4f7f\u7528\u9690\u5f0f\u6cdb\u578b\u53c2\u6570:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"To avoid surprises, it is best to avoid implicit use of the operations of a generic parameter type."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,t.jsx)(n.p,{children:"exception handling generally requires the language implementation to \u201cunwind\u201d the subroutine call stack."}),"\n",(0,t.jsx)(n.p,{children:"try catch\u8bed\u6cd5\uff1a"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"all provide exception-handling facilities in which handlers are lexically bound to blocks of code, and in which the execution of the handler replaces the yet-to-be-completed portion of the block."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In practice, exception handlers tend to perform three kinds of operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"First, ideally, a handler will compensate for the exception in a way that allows the program to recover and continue execution."}),"\n",(0,t.jsx)(n.li,{children:"Second, when an exception occurs in a given block of code but cannot be handled locally, it is often important to declare a local handler that cleans up any resources allocated in the local block, and then \u201creraises\u201dthe exception, so that it will continue to propagate back to a handler that can (hopefully) recover."}),"\n",(0,t.jsx)(n.li,{children:"Third, if recovery is not possible, a handler can at least print a helpful error message before the program terminates."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"defining-exceptions",children:"Defining Exceptions"}),"\n",(0,t.jsx)(n.p,{children:"In many languages, dynamic semantic errors automatically result in exceptions, which the program can then catch. The programmer can also define additional, application-specific exceptions."}),"\n",(0,t.jsx)(n.p,{children:"Most languages use a throw or raise statement,embedded in an if statement, to raise an exception at run time."}),"\n",(0,t.jsx)(n.p,{children:"\u5df2\u77e5\u548c\u672a\u77e5\u5f02\u5e38\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"If a subroutine raises an exception but does not catch it internally, it may \u201creturn\u201d in an unexpected way."}),"\n",(0,t.jsx)(n.p,{children:"include in each subroutine header a list of the exceptions that may propagate out of the routine."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Unchecked exceptions"})," are typically run-time errors that most programs will want to be fatal"]}),"\n",(0,t.jsx)(n.h4,{id:"exception-propagation\u5f02\u5e38\u4f20\u64ad",children:"Exception Propagation\uff08\u5f02\u5e38\u4f20\u64ad\uff09"}),"\n",(0,t.jsx)(n.p,{children:"When an exception arises, the handlers are examined in order; control is transferred to the first one that matches the exception."}),"\n",(0,t.jsx)(n.h4,{id:"implementation-of-exceptions",children:"Implementation of Exceptions"}),"\n",(0,t.jsx)(n.p,{children:"The most obvious implementation for exceptions maintains a linked-list stack of handlers. When control enters a protected block, the handler for that block is added to the head of the list."}),"\n",(0,t.jsx)(n.h3,{id:"coroutines",children:"Coroutines"}),"\n",(0,t.jsx)(n.p,{children:"vs continuation\uff1a"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["a ",(0,t.jsx)(n.em,{children:"continuation"})," is a constant\u2014it does not change once created\u2014while a ",(0,t.jsx)(n.em,{children:"coroutine"})," changes every time it runs."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"coroutines are execution contexts that exist concurrently, but that execute one at a time, and that transfer control to each other explicitly, by name. Coroutines can be used to implement iterators and threads."}),"\n",(0,t.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.p,{children:"An event is something to which a running program (a process) needs to respond, but which occurs outside the program, at an unpredictable time."}),"\n",(0,t.jsx)(n.p,{children:"\u4e8b\u4ef6\u548c\u56de\u8c03\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"Instead, the programmer usually wants a handler\u2014a special subroutine\u2014to be invoked when a given event occurs. Handlers are sometimes known as callback functions,because the run-time system calls back into the main program instead of being called from it."}),"\n",(0,t.jsx)(n.h3,{id:"summary-and-concluding-remarks",children:"Summary and Concluding Remarks"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd9\u4e00\u7ae0\u4e3b\u8981\u5173\u6ce8\u4e86\u63a7\u5236\u62bd\u8c61\u7684\u4e3b\u9898\uff0c\u7279\u522b\u662f\u5b50\u7a0b\u5e8f\u3002\u5b50\u7a0b\u5e8f\u5141\u8bb8\u7a0b\u5e8f\u5458\u5c06\u4ee3\u7801\u5c01\u88c5\u5728\u4e00\u4e2a\u72ed\u7a84\u7684\u63a5\u53e3\u540e\u9762\uff0c\u7136\u540e\u53ef\u4ee5\u4e0d\u8003\u8651\u5176\u5b9e\u73b0\u65b9\u5f0f\u8fdb\u884c\u4f7f\u7528\u3002\u63a7\u5236\u62bd\u8c61\u5bf9\u4e8e\u4efb\u4f55\u5927\u578b\u8f6f\u4ef6\u7cfb\u7edf\u7684\u8bbe\u8ba1\u548c\u7ef4\u62a4\u90fd\u81f3\u5173\u91cd\u8981\u3002\u4ece\u5ba1\u7f8e\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u50cfLisp\u548cSmalltalk\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\uff0c\u5185\u7f6e\u548c\u7528\u6237\u5b9a\u4e49\u7684\u63a7\u5236\u7ed3\u6784\u4f7f\u7528\u76f8\u540c\u7684\u8bed\u6cd5\uff0c\u8fd9\u4f7f\u5f97\u63a7\u5236\u62bd\u8c61\u7279\u522b\u6709\u6548\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u6211\u4eec\u57288.1\u8282\u5f00\u59cb\u7814\u7a76\u5b50\u7a0b\u5e8f\uff0c\u9996\u5148\u56de\u987e\u4e86\u5b50\u7a0b\u5e8f\u8c03\u7528\u5806\u6808\u7684\u7ba1\u7406\u3002\u7136\u540e\u6211\u4eec\u8003\u8651\u4e86\u7528\u4e8e\u7ef4\u62a4\u5806\u6808\u7684\u8c03\u7528\u5e8f\u5217\uff0cPLP CD\u7684\u989d\u5916\u90e8\u5206\u4e13\u95e8\u8ba8\u8bba\u4e86\u5c55\u793a\uff1bMIPSpro C\u7f16\u8bd1\u5668\u548cGNU x86 Pascal\u7f16\u8bd1\u5668\uff08gpc\uff09\u7684\u6848\u4f8b\u7814\u7a76\uff1b\u4ee5\u53caSPARC\u7684\u5bc4\u5b58\u5668\u7a97\u53e3\u3002\u5728\u7b80\u8981\u8003\u8651\u5185\u8054\u6269\u5c55\u4e4b\u540e\uff0c\u6211\u4eec\u57288.3\u8282\u8f6c\u5411\u4e86\u53c2\u6570\u7684\u4e3b\u9898\u3002\u6211\u4eec\u9996\u5148\u8003\u8651\u4e86\u53c2\u6570\u4f20\u9012\u6a21\u5f0f\uff0c\u6240\u6709\u8fd9\u4e9b\u6a21\u5f0f\u90fd\u662f\u901a\u8fc7\u4f20\u9012\u503c\u3001\u5f15\u7528\u6216\u95ed\u5305\u6765\u5b9e\u73b0\u7684\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u8bed\u4e49\u6e05\u6670\u548c\u5b9e\u73b0\u901f\u5ea6\u7684\u76ee\u6807\u6709\u65f6\u4f1a\u6709\u51b2\u7a81\uff1a\u901a\u5e38\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5927\u53c2\u6570\u6700\u6709\u6548\uff0c\u4f46\u662f\u7531\u6b64\u4ea7\u751f\u7684\u522b\u540d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u9519\u8bef\u3002\u57288.3.3\u8282\uff0c\u6211\u4eec\u8003\u8651\u4e86\u7279\u6b8a\u7684\u53c2\u6570\u4f20\u9012\u673a\u5236\uff0c\u5305\u62ec\u4e00\u81f4\u7684\u6570\u7ec4\u3001\u9ed8\u8ba4\uff08\u53ef\u9009\uff09\u53c2\u6570\u3001\u547d\u540d\u53c2\u6570\u548c\u53ef\u53d8\u957f\u5ea6\u7684\u53c2\u6570\u5217\u8868\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u9ed8\u8ba4\u548c\u547d\u540d\u53c2\u6570\u63d0\u4f9b\u4e86\u4e00\u79cd\u5bf9\u52a8\u6001\u8303\u56f4\u7684\u6709\u5438\u5f15\u529b\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u57288.4\u8282\uff0c\u6211\u4eec\u8003\u8651\u4e86\u6cdb\u578b\u5b50\u7a0b\u5e8f\u548c\u6a21\u5757\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002\u6cdb\u578b\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u5c06\u63a7\u5236\u62bd\u8c61\u53c2\u6570\u5316\uff0c\u4ee5\u53c2\u6570\u7684\u7c7b\u578b\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b83\u4eec\u7684\u503c\u4e3a\u57fa\u7840\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u6700\u540e\u7684\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\uff0c\u6211\u4eec\u8003\u8651\u4e86\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u8fd9\u4e9b\u673a\u5236\u5141\u8bb8\u7a0b\u5e8f\u4ee5\u826f\u597d\u7684\u7ed3\u6784\u65b9\u5f0f\u4ece\u5d4c\u5957\u7684\u5b50\u7a0b\u5e8f\u8c03\u7528\u5e8f\u5217\u4e2d\u201c\u89e3\u5f00\u201d\uff1b\u534f\u7a0b\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u7ef4\u62a4\uff08\u5e76\u5728\u4e24\u4e2a\u6216\u66f4\u591a\u6267\u884c\u4e0a\u4e0b\u6587\u4e4b\u95f4\u5207\u6362\uff09\uff1b\u4ee5\u53ca\u4e8b\u4ef6\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u54cd\u5e94\u5f02\u6b65\u5916\u90e8\u6d3b\u52a8\u3002\u5728PLP CD\u4e0a\uff0c\u6211\u4eec\u89e3\u91ca\u4e86\u534f\u7a0b\u5982\u4f55\u7528\u4e8e\u79bb\u6563\u4e8b\u4ef6\u6a21\u62df\u3002\u6211\u4eec\u8fd8\u6ce8\u610f\u5230\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u8fd9\u91cc\u5b58\u5728\u66f4\u7b80\u5355\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u5728\u7b2c12\u7ae0\uff0c\u6211\u4eec\u5c06\u57fa\u4e8e\u534f\u7a0b\u6765\u5b9e\u73b0\u7ebf\u7a0b\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u5e76\u884c\u8fd0\u884c\uff08\u6216\u770b\u8d77\u6765\u5e76\u884c\u8fd0\u884c\uff09\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u51e0\u4e2a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5173\u4e8e\u8bed\u8a00\u5e94\u8be5\u63d0\u4f9b\u54ea\u4e9b\u7c7b\u578b\u7684\u63a7\u5236\u62bd\u8c61\u7684\u89c2\u70b9\u6b63\u5728\u5f62\u6210\u5171\u8bc6\u3002\u50cfFortran\u548cAlgol 60\u8fd9\u6837\u7684\u8bed\u8a00\u7684\u6709\u9650\u53c2\u6570\u4f20\u9012\u6a21\u5f0f\u5df2\u88ab\u66f4\u5e7f\u6cdb\u6216\u7075\u6d3b\u7684\u9009\u9879\u53d6\u4ee3\u3002Ada\u548cC++\u7b49\u8bed\u8a00\u4e2d\uff0c\u6807\u51c6\u7684\u4f4d\u7f6e\u8bb0\u53f7\u6cd5\u5df2\u88ab\u9ed8\u8ba4\u53c2\u6570\u548c\u547d\u540d\u53c2\u6570\u6240\u589e\u5f3a\u3002\u8f83\u5c11\u7ed3\u6784\u5316\u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u5982\u6807\u7b7e\u53c2\u6570\u3001\u975e\u5c40\u90e8goto\u548c\u52a8\u6001\u7ed1\u5b9a\u5904\u7406\u5668\uff0c\u5df2\u88ab\u7ed3\u6784\u5316\u7684\u5f02\u5e38\u5904\u7406\u5668\u53d6\u4ee3\uff0c\u8fd9\u4e9b\u5f02\u5e38\u5904\u7406\u5668\u5728\u5b50\u7a0b\u5e8f\u5185\u90e8\u8fdb\u884c\u8bcd\u6cd5\u8303\u56f4\u5904\u7406\uff0c\u5e76\u4e14\u5728\u5e38\u89c1\uff08\u65e0\u5f02\u5e38\uff09\u60c5\u51b5\u4e0b\u53ef\u4ee5\u96f6\u6210\u672c\u5b9e\u73b0\u3002\u4f20\u7edf\u7684\u4fe1\u53f7\u5904\u7406\u673a\u5236\u4e2d\u7684\u81ea\u53d1\u5b50\u7a0b\u5e8f\u8c03\u7528\u5df2\u88ab\u4e13\u7528\u7ebf\u7a0b\u4e2d\u7684\u56de\u8c03\u53d6\u4ee3\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u8fd9\u4e9b\u65b0\u7279\u6027\u9700\u8981\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u7cfb\u7edf\u53d8\u5f97\u66f4\u590d\u6742\u3002\u5076\u5c14\uff0c\u5982call-by-name\u53c2\u6570\u3001\u6807\u7b7e\u53c2\u6570\u6216\u975e\u5c40\u90e8goto\u7684\u60c5\u51b5\uff0c\u8bed\u4e49\u4e0a\u4ee4\u4eba\u56f0\u60d1\u7684\u7279\u6027\u4e5f\u96be\u4ee5\u5b9e\u73b0\uff0c\u653e\u5f03\u5b83\u4eec\u4f7f\u7f16\u8bd1\u5668\u53d8\u5f97\u66f4\u7b80\u5355\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u6709\u7528\u4f46\u96be\u4ee5\u5b9e\u73b0\u7684\u8bed\u8a00\u7279\u6027\u4ecd\u7136\u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\u51fa\u73b0\uff0c\u4f46\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u5219\u4e0d\u51fa\u73b0\u3002\u8fd9\u4e00\u7c7b\u522b\u7684\u4f8b\u5b50\u5305\u62ec\u4e00\u7b49\u5b50\u7a0b\u5e8f\u3001\u534f\u7a0b\u3001\u8fed\u4ee3\u5668\u3001\u7eed\u5ef6\u548c\u5177\u6709\u65e0\u9650\u8303\u56f4\u7684\u5c40\u90e8\u5bf9\u8c61\u3002"})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var t=i(7294);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);